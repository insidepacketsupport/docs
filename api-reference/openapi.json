{
  "openapi": "3.0.2",
  "info": {
    "title": "NIRO API",
    "description": "Tenant API shema for NIRO",
    "version": "NIRO-2.13.0"
  },
  "paths": {
    "/grafana/{path}": {
      "get": {
        "tags": [
          "grafana"
        ],
        "summary": "Get Dashboard",
        "operationId": "get_dashboard_grafana__path__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "grafana"
        ],
        "summary": "Get Dashboard",
        "operationId": "get_dashboard_grafana__path__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/kibana/{path}": {
      "get": {
        "tags": [
          "kibana"
        ],
        "summary": "Kibana Request",
        "operationId": "kibana_request_kibana__path__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "kibana"
        ],
        "summary": "Kibana Request",
        "operationId": "kibana_request_kibana__path__post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/elasticsearch/{path}": {
      "get": {
        "tags": [
          "elasticsearch"
        ],
        "summary": "Elasticsearch Request",
        "operationId": "elasticsearch_request_elasticsearch__path__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "elasticsearch"
        ],
        "summary": "Elasticsearch Request",
        "operationId": "elasticsearch_request_elasticsearch__path__post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/keycloak/{path}": {
      "get": {
        "tags": [
          "keycloak"
        ],
        "summary": "Keycloak Request",
        "operationId": "keycloak_request_keycloak__path__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "keycloak"
        ],
        "summary": "Keycloak Request",
        "operationId": "keycloak_request_keycloak__path__put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "keycloak"
        ],
        "summary": "Keycloak Request",
        "operationId": "keycloak_request_keycloak__path__post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "keycloak"
        ],
        "summary": "Keycloak Request",
        "operationId": "keycloak_request_keycloak__path__delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/users": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "operationId": "delete_user_users_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Username",
              "type": "string"
            },
            "name": "username",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Current User",
        "operationId": "get_current_user_users_current_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update Current User",
        "operationId": "update_current_user_users_current_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateUserBaseData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/users/current/password": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update Current User Password",
        "operationId": "update_current_user_password_users_current_password_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "New Password",
              "type": "string",
              "format": "password",
              "writeOnly": true
            },
            "name": "new_password",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/users/get_token": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Get user access token. New password used only for users who need to update it.",
        "operationId": "get_token_users_get_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeycloakToken"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/revoke_token": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Revoke Token",
        "operationId": "revoke_token_users_revoke_token_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/get_token_sso": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Get user access token, exchanged by the code from the sso",
        "operationId": "resolve_single_sign_on_redirect_users_get_token_sso_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOTokenExchangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeycloakToken"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/get_sso_providers": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Return list of all supported single sign-on provider",
        "operationId": "get_all_single_sign_on_providers_users_get_sso_providers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleSignOnProviders"
                }
              }
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get Groups",
        "operationId": "get_groups_group_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/group/{group_name}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get Group",
        "operationId": "get_group_group__group_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Group Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "group_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/system/{system_name}": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get a system",
        "operationId": "get_system_system__system_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "System Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "system_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBSystemResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/system": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get list of all system",
        "operationId": "get_systems_system_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/get_one/{user_name}/{tunnel_id}": {
      "get": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Get Wg Tunnel",
        "operationId": "get_wg_tunnel_service__tenant_name__wg_tunnel_get_one__user_name___tunnel_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBWGTunnel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/get_conf/{user_name}/{tunnel_id}": {
      "get": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Get Tunnel Wg Conf",
        "operationId": "get_tunnel_wg_conf_service__tenant_name__wg_tunnel_get_conf__user_name___tunnel_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBWGTunnelConfResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/get_user_list/{user_name}": {
      "get": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Get User List Wg Tunnel",
        "operationId": "get_user_list_wg_tunnel_service__tenant_name__wg_tunnel_get_user_list__user_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/get_list": {
      "get": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Get List Wg Tunnel",
        "operationId": "get_list_wg_tunnel_service__tenant_name__wg_tunnel_get_list_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/{user_name}/{system_name}": {
      "post": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Create a new VPN app tunnel",
        "operationId": "create_wg_tunnel_service__tenant_name__wg_tunnel__user_name___system_name__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "System Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "system_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBWGTunnelCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/{user_name}/{tunnel_id}/device_data": {
      "post": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Collect remote user app data",
        "operationId": "collect_remote_user_app_data_service__tenant_name__wg_tunnel__user_name___tunnel_id__device_data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBWGTunnelDeviceDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBWGTunnelDeviceDataResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel/{user_name}/{tunnel_id}": {
      "delete": {
        "tags": [
          "service - vpn app"
        ],
        "summary": "Delete a VPN app tunnel",
        "operationId": "delete_wg_tunnel_service__tenant_name__wg_tunnel__user_name___tunnel_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel_status": {
      "get": {
        "tags": [
          "service - vpn app - status"
        ],
        "summary": "vpn app get status",
        "operationId": "wireguard_get_service__tenant_name__wg_tunnel_status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Wireguard Get Service  Tenant Name  Wg Tunnel Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/wg_tunnel_status/{user_name}": {
      "get": {
        "tags": [
          "service - vpn app - status"
        ],
        "summary": "vpn app get status",
        "operationId": "wireguard_user_get_service__tenant_name__wg_tunnel_status__user_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "System Name",
              "type": "string"
            },
            "name": "system_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Wireguard User Get Service  Tenant Name  Wg Tunnel Status  User Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/trusted_access/{user_name}/{tunnel_id}": {
      "get": {
        "tags": [
          "service - trusted access"
        ],
        "summary": "Check Trusted Access",
        "operationId": "check_trusted_access_service__tenant_name__trusted_access__user_name___tunnel_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedAccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - trusted access"
        ],
        "summary": "Request Trusted Access",
        "operationId": "request_trusted_access_service__tenant_name__trusted_access__user_name___tunnel_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tunnel Id",
              "type": "string"
            },
            "name": "tunnel_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Name",
              "type": "string"
            },
            "name": "user_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedAccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule": {
      "get": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Get All Tenant Fw Rules",
        "operationId": "get_all_tenant_fw_rules_service__tenant_name__firewall_rule_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Create Tenant Fw Rule",
        "operationId": "create_tenant_fw_rule_service__tenant_name__firewall_rule_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateFirewallRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/dia": {
      "post": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Create Tenant Dia Fw Rule",
        "operationId": "create_tenant_dia_fw_rule_service__tenant_name__firewall_rule_dia_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateFirewallRuleDiaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}": {
      "get": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Get Tenant Fw Rule",
        "operationId": "get_tenant_fw_rule_service__tenant_name__firewall_rule__rule_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBFirewallRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Update FW rule",
        "operationId": "update_tenant_fw_rule_service__tenant_name__firewall_rule__rule_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateFirewallRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Delete Tenant Fw Rule",
        "operationId": "delete_tenant_fw_rule_service__tenant_name__firewall_rule__rule_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/name": {
      "patch": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Modify rule's name",
        "operationId": "update_tenant_fw_rule_name_service__tenant_name__firewall_rule__rule_name__name_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateFirewallRuleNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/priority": {
      "patch": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Modify rule's priority",
        "operationId": "update_tenant_fw_rule_priority_service__tenant_name__firewall_rule__rule_name__priority_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateFirewallRulePriorityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/filters": {
      "patch": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Modify rule's filter",
        "operationId": "update_tenant_fw_rule_filters_service__tenant_name__firewall_rule__rule_name__filters_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateFirewallRuleFiltersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/forwarding_policy": {
      "patch": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Modify rule's forwarding policy",
        "operationId": "update_tenant_fw_rule_forwarding_policy_service__tenant_name__firewall_rule__rule_name__forwarding_policy_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateFirewallRuleForwardingPolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/description": {
      "patch": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Modify rule's description",
        "operationId": "update_tenant_fw_rule_description_service__tenant_name__firewall_rule__rule_name__description_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateDescriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/enable": {
      "patch": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Modify rule's enable/disable",
        "operationId": "update_tenant_fw_rule_enable_service__tenant_name__firewall_rule__rule_name__enable_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateEnableRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/firewall_rule/{rule_name}/dia": {
      "put": {
        "tags": [
          "service - firewall"
        ],
        "summary": "Update FW rule",
        "operationId": "update_tenant_cluster_fw_rule_service__tenant_name__firewall_rule__rule_name__dia_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateDIAFirewallRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/pbr_rule": {
      "get": {
        "tags": [
          "service - pbr"
        ],
        "summary": "Get All Tenant Pbr Rules",
        "operationId": "get_all_tenant_pbr_rules_service__tenant_name__pbr_rule_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - pbr"
        ],
        "summary": "Create Tenant Pbr Rule",
        "operationId": "create_tenant_pbr_rule_service__tenant_name__pbr_rule_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreatePBRRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/pbr_rule/{rule_name}": {
      "get": {
        "tags": [
          "service - pbr"
        ],
        "summary": "Get Tenant Pbr Rule",
        "operationId": "get_tenant_pbr_rule_service__tenant_name__pbr_rule__rule_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBPBRRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - pbr"
        ],
        "summary": "Update PBR rule",
        "operationId": "update_tenant_pbr_rule_service__tenant_name__pbr_rule__rule_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdatePBRRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - pbr"
        ],
        "summary": "Delete Tenant Pbr Rule",
        "operationId": "delete_tenant_pbr_rule_service__tenant_name__pbr_rule__rule_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/pbm_rule": {
      "get": {
        "tags": [
          "service - pbm"
        ],
        "summary": "Get All Tenant Pbm Rules",
        "operationId": "get_all_tenant_pbm_rules_service__tenant_name__pbm_rule_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - pbm"
        ],
        "summary": "Create Tenant Pbm Rule",
        "operationId": "create_tenant_pbm_rule_service__tenant_name__pbm_rule_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreatePBMRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/pbm_rule/{rule_name}": {
      "get": {
        "tags": [
          "service - pbm"
        ],
        "summary": "Get Tenant Pbm Rule",
        "operationId": "get_tenant_pbm_rule_service__tenant_name__pbm_rule__rule_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBPBMRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - pbm"
        ],
        "summary": "Update PBM rule",
        "operationId": "update_tenant_pbm_rule_service__tenant_name__pbm_rule__rule_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdatePBMRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - pbm"
        ],
        "summary": "Delete Tenant Pbm Rule",
        "operationId": "delete_tenant_pbm_rule_service__tenant_name__pbm_rule__rule_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_.:]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/nat_rule": {
      "get": {
        "tags": [
          "service - NAT"
        ],
        "summary": "Get all NAT rules",
        "operationId": "get_all_tenant_nat_rules_service__tenant_name__nat_rule_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - NAT"
        ],
        "summary": "Create NAT rule",
        "operationId": "create_tenant_nat_rule_service__tenant_name__nat_rule_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateNATRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/nat_rule/{rule_name}": {
      "get": {
        "tags": [
          "service - NAT"
        ],
        "summary": "Get specific NAT Rule",
        "operationId": "get_tenant_nat_rule_service__tenant_name__nat_rule__rule_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBBaseNATRule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - NAT"
        ],
        "summary": "Modify NAT rule",
        "operationId": "update_tenant_nat_rule_service__tenant_name__nat_rule__rule_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NATRuleUpdateData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - NAT"
        ],
        "summary": "Delete NAT rule",
        "operationId": "delete_tenant_nat_rule_service__tenant_name__nat_rule__rule_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "rule_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/autonomous_system": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get the autonomous system info for a Tenant",
        "operationId": "get_tenant_autonomous_system_service__tenant_name__bgp_autonomous_system_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseAutonomousSystem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Create an autonomous system for a Tenant",
        "operationId": "create_tenant_autonomous_system_service__tenant_name__bgp_autonomous_system_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateAutonomousSystemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Delete an autonomous system from a Tenant",
        "operationId": "delete_autonomous_system_service__tenant_name__bgp_autonomous_system_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/neighbor": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get All Tenant Neighbors",
        "operationId": "get_all_tenant_neighbors_service__tenant_name__bgp_neighbor_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Create Tenant Neighbor",
        "operationId": "create_tenant_neighbor_service__tenant_name__bgp_neighbor_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateBGPNeighborRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/neighbor/{remote_router_ip}": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get Tenant Neighbor By Ip",
        "operationId": "get_tenant_neighbor_by_ip_service__tenant_name__bgp_neighbor__remote_router_ip__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "remote_router_ip",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBNeighbor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Update neighbor",
        "operationId": "update_tenant_neighbor_service__tenant_name__bgp_neighbor__remote_router_ip__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "remote_router_ip",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBNeighborUpdateData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Delete Tenant Neighbor",
        "operationId": "delete_tenant_neighbor_service__tenant_name__bgp_neighbor__remote_router_ip__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "remote_router_ip",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/neighbor/{remote_router_ip}/reset": {
      "put": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get advertised routes",
        "operationId": "reset_bgp_service__tenant_name__bgp_neighbor__remote_router_ip__reset_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "type": "string"
            },
            "name": "remote_router_ip",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBBgpResetUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/neighbor/{remote_router_ip}/advertised_routes": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get advertised routes",
        "operationId": "get_advertised_routes_service__tenant_name__bgp_neighbor__remote_router_ip__advertised_routes_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "type": "string"
            },
            "name": "remote_router_ip",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Gate Vi Name",
              "type": "string"
            },
            "name": "gate_vi_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisedRoutes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/neighbor/{remote_router_ip}/received_routes": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get received routes",
        "operationId": "get_received_routes_service__tenant_name__bgp_neighbor__remote_router_ip__received_routes_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "type": "string"
            },
            "name": "remote_router_ip",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Gate Vi Name",
              "type": "string"
            },
            "name": "gate_vi_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpReceivedRoutes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/neighbor/{remote_router_ip}/filtered_routes": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get filtered routes",
        "operationId": "get_filtered_routes_service__tenant_name__bgp_neighbor__remote_router_ip__filtered_routes_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "type": "string"
            },
            "name": "remote_router_ip",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Gate Vi Name",
              "type": "string"
            },
            "name": "gate_vi_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpFilteredReceivedRoutes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp_pfx_list": {
      "get": {
        "tags": [
          "service - bgp_pfx_list"
        ],
        "summary": "Get All Tenant Bgp Route Maps",
        "operationId": "get_all_tenant_bgp_route_maps_service__tenant_name__bgp_pfx_list_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - bgp_pfx_list"
        ],
        "summary": "Create Tenant Bgp Route Map",
        "operationId": "create_tenant_bgp_route_map_service__tenant_name__bgp_pfx_list_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBBGPRouteMapCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp_pfx_list/{name}": {
      "get": {
        "tags": [
          "service - bgp_pfx_list"
        ],
        "summary": "Get Tenant Bgp Route Map",
        "operationId": "get_tenant_bgp_route_map_service__tenant_name__bgp_pfx_list__name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBBGPRouteMap"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - bgp_pfx_list"
        ],
        "summary": "Delete Tenant Bgp Route Map",
        "operationId": "delete_tenant_bgp_route_map_service__tenant_name__bgp_pfx_list__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp_route_map_rule": {
      "get": {
        "tags": [
          "service - bgp_route_map_rule"
        ],
        "summary": "Get All Tenant Bgp Route Map Rules",
        "operationId": "get_all_tenant_bgp_route_map_rules_service__tenant_name__bgp_route_map_rule_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - bgp_route_map_rule"
        ],
        "summary": "Create Tenant Bgp Route Map Rule",
        "operationId": "create_tenant_bgp_route_map_rule_service__tenant_name__bgp_route_map_rule_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBBGPRouteMapRuleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp_route_map_rule/{name}": {
      "get": {
        "tags": [
          "service - bgp_route_map_rule"
        ],
        "summary": "Get Tenant Bgp Route Map Rule",
        "operationId": "get_tenant_bgp_route_map_rule_service__tenant_name__bgp_route_map_rule__name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BGPRouteMapRule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - bgp_route_map_rule"
        ],
        "summary": "Delete Tenant Bgp Route Map Rule",
        "operationId": "delete_tenant_bgp_route_map_rule_service__tenant_name__bgp_route_map_rule__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/status": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get Bgp Status",
        "operationId": "get_bgp_status_service__tenant_name__bgp_status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/summery": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get Bgp Summery",
        "operationId": "get_bgp_summery_service__tenant_name__bgp_summery_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Remote Router Ip",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "remote_router_ip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BGPSummeryGetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/bgp/bfd_status": {
      "get": {
        "tags": [
          "service - routing - BGP"
        ],
        "summary": "Get Bfd Status",
        "operationId": "get_bfd_status_service__tenant_name__bgp_bfd_status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/sdr": {
      "get": {
        "tags": [
          "service - SDR"
        ],
        "summary": "Get Tenant Sdr",
        "operationId": "get_tenant_sdr_service__tenant_name__sdr_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBSDR"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/static_route": {
      "get": {
        "tags": [
          "service - routing - static route"
        ],
        "summary": "Get all static routes by tenant",
        "operationId": "get_static_routes_service__tenant_name__static_route_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - routing - static route"
        ],
        "summary": "Create a new static route",
        "operationId": "add_static_route_service__tenant_name__static_route_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateStaticRouteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - routing - static route"
        ],
        "summary": "Delete a static route",
        "operationId": "delete_static_route_service__tenant_name__static_route_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBDeleteStaticRouteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/static_route/description": {
      "put": {
        "tags": [
          "service - routing - static route"
        ],
        "summary": "Modify a static routes description",
        "operationId": "update_static_route_description_service__tenant_name__static_route_description_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Destination",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4network"
                },
                {
                  "type": "string",
                  "format": "ipv6network"
                }
              ]
            },
            "name": "destination",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Gateway Ip Address",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "gateway_ip_address",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Gateway Interface",
              "type": "string"
            },
            "name": "gateway_interface",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateDescriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/static_route/enabled": {
      "put": {
        "tags": [
          "service - routing - static route"
        ],
        "summary": "Modify a static routes enabled status",
        "operationId": "update_static_route_enabled_service__tenant_name__static_route_enabled_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Destination",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4network"
                },
                {
                  "type": "string",
                  "format": "ipv6network"
                }
              ]
            },
            "name": "destination",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Gateway Ip Address",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "gateway_ip_address",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Gateway Interface",
              "type": "string"
            },
            "name": "gateway_interface",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateEnableRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/arp": {
      "get": {
        "tags": [
          "service - arp"
        ],
        "summary": "Get the ARP information for specific tenant",
        "operationId": "get_arp_service__tenant_name__arp_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/route": {
      "get": {
        "tags": [
          "service - routes"
        ],
        "summary": "Get the routes information for specific tenant",
        "operationId": "get_routes_service__tenant_name__route_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aws/direct_connect": {
      "post": {
        "tags": [
          "service - aws"
        ],
        "summary": "Create Direct Connect",
        "operationId": "create_direct_connect_service__tenant_name__aws_direct_connect_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBAwsInterconnectCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - aws"
        ],
        "summary": "Delete Direct Connect",
        "operationId": "delete_direct_connect_service__tenant_name__aws_direct_connect_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Name",
              "type": "string"
            },
            "name": "connection_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aws/direct_connects": {
      "get": {
        "tags": [
          "service - aws"
        ],
        "summary": "List Direct Connects",
        "operationId": "list_direct_connects_service__tenant_name__aws_direct_connects_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aws/direct_connect/{connection_name}": {
      "get": {
        "tags": [
          "service - aws"
        ],
        "summary": "Get Direct Connects",
        "operationId": "get_direct_connects_service__tenant_name__aws_direct_connect__connection_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Name",
              "type": "string"
            },
            "name": "connection_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interconnect"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aws/vpcs": {
      "get": {
        "tags": [
          "service - aws"
        ],
        "summary": "List Client Vpcs",
        "operationId": "list_client_vpcs_service__tenant_name__aws_vpcs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Region",
              "type": "string"
            },
            "name": "region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Client Vpcs Service  Tenant Name  Aws Vpcs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VpcTypeDef"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aws/site_to_site_vpn_old": {
      "post": {
        "tags": [
          "service - aws",
          "service - aws"
        ],
        "summary": "Create Aws Vpn Connection",
        "operationId": "create_aws_vpn_connection_service__tenant_name__aws_site_to_site_vpn_old_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsVpnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aws/site_to_site_vpn": {
      "post": {
        "tags": [
          "service - aws"
        ],
        "summary": "Create Aws Vpn Connection New",
        "operationId": "create_aws_vpn_connection_new_service__tenant_name__aws_site_to_site_vpn_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsVpnRequestNew"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/azure/express_route": {
      "post": {
        "tags": [
          "service - azure"
        ],
        "summary": "Create Express Route",
        "operationId": "create_express_route_service__tenant_name__azure_express_route_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBAzureInterconnectCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - azure"
        ],
        "summary": "Delete Express Route",
        "operationId": "delete_express_route_service__tenant_name__azure_express_route_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Name",
              "type": "string"
            },
            "name": "connection_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/azure/express_routes": {
      "get": {
        "tags": [
          "service - azure"
        ],
        "summary": "List Express Routes",
        "operationId": "list_express_routes_service__tenant_name__azure_express_routes_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/azure/experss_route/{connection_name}": {
      "get": {
        "tags": [
          "service - azure"
        ],
        "summary": "Get Express Routes",
        "operationId": "get_express_routes_service__tenant_name__azure_experss_route__connection_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Name",
              "type": "string"
            },
            "name": "connection_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interconnect"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/azure/vnets": {
      "get": {
        "tags": [
          "service - azure"
        ],
        "summary": "List Client Vnets",
        "operationId": "list_client_vnets_service__tenant_name__azure_vnets_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Region",
              "type": "string"
            },
            "name": "region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Client Vnets Service  Tenant Name  Azure Vnets Get",
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/azure/resource_groups": {
      "get": {
        "tags": [
          "service - azure"
        ],
        "summary": "List Client Resource Groups",
        "operationId": "list_client_resource_groups_service__tenant_name__azure_resource_groups_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Region",
              "type": "string"
            },
            "name": "region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Client Resource Groups Service  Tenant Name  Azure Resource Groups Get",
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/azure/site_to_site_vpn": {
      "post": {
        "tags": [
          "service - azure"
        ],
        "summary": "Create Azure Vpn Connection",
        "operationId": "create_azure_vpn_connection_service__tenant_name__azure_site_to_site_vpn_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AzureVpnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aruba/api/{path}": {
      "get": {
        "tags": [
          "service - aruba"
        ],
        "summary": "Request Aruba Api",
        "operationId": "request_aruba_api_service__tenant_name__aruba_api__path__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - aruba"
        ],
        "summary": "Request Aruba Api",
        "operationId": "request_aruba_api_service__tenant_name__aruba_api__path__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aruba/discover": {
      "get": {
        "tags": [
          "service - aruba"
        ],
        "summary": "Get Tenant Aruba Access Key",
        "operationId": "get_tenant_aruba_access_key_service__tenant_name__aruba_discover_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBArubaDiscoverResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/aruba/connect": {
      "post": {
        "tags": [
          "service - aruba"
        ],
        "summary": "Connect Tenant Aruba Access Key",
        "operationId": "connect_tenant_aruba_access_key_service__tenant_name__aruba_connect_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBArubaConnectCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/gcp/interconnect": {
      "get": {
        "tags": [
          "service - gcp"
        ],
        "summary": "Get Interconnects",
        "operationId": "get_interconnects_service__tenant_name__gcp_interconnect_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Name",
              "type": "string"
            },
            "name": "connection_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interconnect"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - gcp"
        ],
        "summary": "Create Interconnect",
        "operationId": "create_interconnect_service__tenant_name__gcp_interconnect_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBGCPInterconnectCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - gcp"
        ],
        "summary": "Delete Interconnect",
        "operationId": "delete_interconnect_service__tenant_name__gcp_interconnect_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Name",
              "type": "string"
            },
            "name": "connection_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/gcp/interconnects": {
      "get": {
        "tags": [
          "service - gcp"
        ],
        "summary": "List Interconnects",
        "operationId": "list_interconnects_service__tenant_name__gcp_interconnects_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/network_segmentation": {
      "get": {
        "tags": [
          "service - network segmentation",
          "service - network segmentation"
        ],
        "summary": "Get Tenant Network Segments",
        "operationId": "get_tenant_network_segments_service__tenant_name__network_segmentation_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Ip Address",
              "anyOf": [
                {
                  "type": "string",
                  "format": "ipv4"
                },
                {
                  "type": "string",
                  "format": "ipv6"
                }
              ]
            },
            "name": "ip_address",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/network_segmentation/{segment_name}": {
      "get": {
        "tags": [
          "service - network segmentation",
          "service - network segmentation"
        ],
        "summary": "Get Tenant Segment",
        "operationId": "get_tenant_segment_service__tenant_name__network_segmentation__segment_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Segment Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "segment_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBNetworkSegmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - network segmentation",
          "service - network segmentation"
        ],
        "summary": "Update Tenant Network Segments",
        "operationId": "update_tenant_network_segments_service__tenant_name__network_segmentation__segment_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Segment Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "segment_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBNetworkSegmentUpdateDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/group": {
      "get": {
        "tags": [
          "service - group"
        ],
        "summary": "Get Tenant Groups",
        "operationId": "get_tenant_groups_service__tenant_name__group_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - group"
        ],
        "summary": "Create Tenant Group",
        "operationId": "create_tenant_group_service__tenant_name__group_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateTenantGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/group/{group_name}": {
      "get": {
        "tags": [
          "service - group"
        ],
        "summary": "Get Tenant Group",
        "operationId": "get_tenant_group_service__tenant_name__group__group_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Group Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "group_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - group"
        ],
        "summary": "Update Tenant Group",
        "operationId": "update_tenant_group_service__tenant_name__group__group_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Group Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "group_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateTenantGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - group"
        ],
        "summary": "Delete Tenant Group",
        "operationId": "delete_tenant_group_service__tenant_name__group__group_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Group Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "group_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/network_object": {
      "get": {
        "tags": [
          "service - network object"
        ],
        "summary": "Get list of Network object",
        "operationId": "get_network_object_list_service__tenant_name__network_object_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - network object"
        ],
        "summary": "Create Network object",
        "operationId": "create_network_object_service__tenant_name__network_object_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkObjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/network_object/{object_name}": {
      "put": {
        "tags": [
          "service - network object"
        ],
        "summary": "Update Network object",
        "operationId": "update_network_object_service__tenant_name__network_object__object_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Object Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "object_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkObjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - network object"
        ],
        "summary": "Delete Network object",
        "operationId": "delete_network_object_service__tenant_name__network_object__object_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Object Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "object_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/enabled_service": {
      "get": {
        "tags": [
          "service - enabled services"
        ],
        "summary": "Get All Tenant Enabled Services",
        "operationId": "get_all_tenant_enabled_services_service__tenant_name__enabled_service_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBEnabledServiceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "service - enabled services"
        ],
        "summary": "Update Tenant Enabled Services",
        "operationId": "update_tenant_enabled_services_service__tenant_name__enabled_service_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateEnabledServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/connection/connections": {
      "post": {
        "tags": [
          "service - connection"
        ],
        "summary": "Create Connections",
        "operationId": "create_connections_service__tenant_name__connection_connections_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBConnectionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/endpoint": {
      "get": {
        "tags": [
          "service - endpoint"
        ],
        "summary": "Get all end points",
        "operationId": "get_end_point_service__tenant_name__endpoint_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/policy": {
      "get": {
        "tags": [
          "service - policy"
        ],
        "summary": "Get all policies",
        "operationId": "get_policies_service__tenant_name__policy_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - policy"
        ],
        "summary": "Create a new policy",
        "operationId": "create_policy_service__tenant_name__policy_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBPolicyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/policy/{name}": {
      "put": {
        "tags": [
          "service - policy"
        ],
        "summary": "Modify a policy",
        "operationId": "update_policy_service__tenant_name__policy__name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBPolicyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - policy"
        ],
        "summary": "Delete a policy",
        "operationId": "delete_policy_service__tenant_name__policy__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/time_policy": {
      "get": {
        "tags": [
          "service - time policy"
        ],
        "summary": "Get All Tenant Time Policies",
        "operationId": "get_all_tenant_time_policies_service__tenant_name__time_policy_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - time policy"
        ],
        "summary": "Create Time Policy",
        "operationId": "create_time_policy_service__tenant_name__time_policy_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBTimePolicyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/time_policy/{time_policy_name}": {
      "get": {
        "tags": [
          "service - time policy"
        ],
        "summary": "Get Tenant Time Policy",
        "operationId": "get_tenant_time_policy_service__tenant_name__time_policy__time_policy_name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Time Policy Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "time_policy_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBTimePolicy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - time policy"
        ],
        "summary": "Delete Tenant Time Policy",
        "operationId": "delete_tenant_time_policy_service__tenant_name__time_policy__time_policy_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Time Policy Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "time_policy_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2": {
      "get": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Get All Tenant L2 Interface",
        "operationId": "get_all_tenant_l2_interface_service__tenant_name__l2_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/customer_port": {
      "get": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Get All Tenant L2 Interface Requests",
        "operationId": "get_all_tenant_l2_interface_requests_service__tenant_name__l2_customer_port_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Request Customer Port",
        "operationId": "request_customer_port_service__tenant_name__l2_customer_port_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBRequestCustomerPortRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/customer_port/{name}": {
      "put": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Update Customer Port Labels",
        "operationId": "update_customer_port_labels_service__tenant_name__l2_customer_port__name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateCustomerPortRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "delete a request for port",
        "operationId": "unrequest_customer_port_l2_service__tenant_name__l2_customer_port__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Port Type",
              "type": "string",
              "default": "customer_location"
            },
            "name": "port_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/customer_port/{customer_port_name}/vlan": {
      "post": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Create Tenant L2",
        "operationId": "create_tenant_l2_service__tenant_name__l2_customer_port__customer_port_name__vlan_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Port Name",
              "type": "string"
            },
            "name": "customer_port_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBTenantL2CreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/customer_port/{customer_port_name}/vlan/{name}": {
      "put": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Update Port Vlan Interface Bandwidth",
        "operationId": "update_port_vlan_interface_bandwidth_service__tenant_name__l2_customer_port__customer_port_name__vlan__name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Port Name",
              "type": "string"
            },
            "name": "customer_port_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBTenantL2UpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Delete an interface",
        "operationId": "delete_port_vlan_interface_service__tenant_name__l2_customer_port__customer_port_name__vlan__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Port Name",
              "type": "string"
            },
            "name": "customer_port_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/aws_direct_connect": {
      "post": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Create Aws Tenant L2",
        "operationId": "create_aws_tenant_l2_service__tenant_name__l2_aws_direct_connect_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBTenantAWSDirectConnectCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/aws_direct_connect/{customer_port_name}": {
      "delete": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Delete an interface",
        "operationId": "delete_aws_port_vlan_interface_service__tenant_name__l2_aws_direct_connect__customer_port_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Port Name",
              "type": "string"
            },
            "name": "customer_port_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/azure_service_key": {
      "get": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "discover the azure secret key",
        "operationId": "discover_key_azure_service__tenant_name__l2_azure_service_key_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "type": "string"
            },
            "name": "service_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Discover Key Azure Service  Tenant Name  L2 Azure Service Key Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/azure_direct_connect/{customer_port_name}": {
      "delete": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Delete an interface",
        "operationId": "delete_azure_port_vlan_interface_service__tenant_name__l2_azure_direct_connect__customer_port_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Port Name",
              "type": "string"
            },
            "name": "customer_port_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/l2/gcp_direct_connect/{customer_port_name}": {
      "delete": {
        "tags": [
          "service - l2_interface"
        ],
        "summary": "Delete an interface",
        "operationId": "delete_gcp_port_vlan_interface_service__tenant_name__l2_gcp_direct_connect__customer_port_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Port Name",
              "type": "string"
            },
            "name": "customer_port_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/asn": {
      "get": {
        "tags": [
          "service - asn"
        ],
        "summary": "Get Asns",
        "operationId": "get_asns_service__tenant_name__asn_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "service - asn"
        ],
        "summary": "Create Asn",
        "operationId": "create_asn_service__tenant_name__asn_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCreateASNRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/asn/{asn}": {
      "put": {
        "tags": [
          "service - asn"
        ],
        "summary": "Update Asn",
        "operationId": "update_asn_service__tenant_name__asn__asn__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Asn",
              "type": "integer"
            },
            "name": "asn",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBTenantUpdateASNRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "service - asn"
        ],
        "summary": "delete a request for port",
        "operationId": "delete_asn_l2_service__tenant_name__asn__asn__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Asn",
              "type": "integer"
            },
            "name": "asn",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/ddos/dia": {
      "get": {
        "tags": [
          "tenant - ip-flood"
        ],
        "summary": "Get tenant ip_flood",
        "operationId": "get_tenant_ip_flood_service__tenant_name__ddos_dia_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/ddos/dia/{ip_flood_id}": {
      "put": {
        "tags": [
          "tenant - ip-flood"
        ],
        "summary": "Update ip flood",
        "operationId": "update_ip_flood_service__tenant_name__ddos_dia__ip_flood_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Ip Flood Id",
              "type": "integer"
            },
            "name": "ip_flood_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateIpFloodDiaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - ip-flood"
        ],
        "summary": "Delete a ip flood",
        "operationId": "delete_tenant_ip_flood_service__tenant_name__ddos_dia__ip_flood_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Ip Flood Id",
              "type": "integer"
            },
            "name": "ip_flood_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/ddos/dia/": {
      "put": {
        "tags": [
          "tenant - ip-flood"
        ],
        "summary": "Update ip flood",
        "operationId": "update_mitigate_all_service__tenant_name__ddos_dia__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateMitigationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/ddos/dia/customize/{ip_flood_id}": {
      "post": {
        "tags": [
          "tenant - ip-flood"
        ],
        "summary": "customize new ip flood",
        "operationId": "duplicate_tenant_ip_flood_service__tenant_name__ddos_dia_customize__ip_flood_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Ip Flood Id",
              "type": "integer"
            },
            "name": "ip_flood_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBDuplicateIpFloodDiaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/mac": {
      "get": {
        "tags": [
          "service - mac"
        ],
        "summary": "Get the MAC information for specific tenant",
        "operationId": "get_arp_service__tenant_name__mac_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/looking_glass/ping": {
      "post": {
        "tags": [
          "service - looking glass"
        ],
        "summary": "Ping",
        "operationId": "ping_service_looking_glass_ping_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PingRequestParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/looking_glass/route_lookup": {
      "post": {
        "tags": [
          "service - looking glass",
          "service - looking glass",
          "T_user"
        ],
        "summary": "Get Route Lookup",
        "operationId": "get_route_lookup_service_looking_glass_route_lookup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteLookUpRequestParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/looking_glass/traceroute": {
      "post": {
        "tags": [
          "service - looking glass",
          "service - looking glass"
        ],
        "summary": "Traceroute",
        "operationId": "traceroute_service_looking_glass_traceroute_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TraceRouteRequestParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/looking_glass/pcap": {
      "post": {
        "tags": [
          "service - looking glass",
          "service - looking glass",
          "T_user"
        ],
        "summary": "Pcap",
        "operationId": "pcap_service_looking_glass_pcap_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PCAPParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/looking_glass/mtu": {
      "post": {
        "tags": [
          "service - looking glass",
          "service - looking glass"
        ],
        "summary": "Mtu",
        "operationId": "mtu_service_looking_glass_mtu_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MTURequestParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/looking_glass/result": {
      "post": {
        "tags": [
          "service - looking glass"
        ],
        "summary": "Get Result",
        "operationId": "get_result_service_looking_glass_result_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookingGlassRequestResultParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/config/ipam/pfx_available": {
      "get": {
        "tags": [
          "config - ipam"
        ],
        "summary": "Get all ipam pools usage",
        "operationId": "get_ipam_pool_usage_tenant_config_ipam_pfx_available_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LocationType"
            },
            "name": "location_type",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Dia Service",
              "type": "boolean"
            },
            "name": "dia_service",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Ipsec Service",
              "type": "boolean"
            },
            "name": "ipsec_service",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Nat Service",
              "type": "boolean"
            },
            "name": "nat_service",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Snat Service",
              "type": "boolean"
            },
            "name": "snat_service",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Shared",
              "type": "boolean"
            },
            "name": "shared",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBTenantIPAM"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/config/request/user/all": {
      "get": {
        "tags": [
          "config - request"
        ],
        "summary": "Get All User Requests",
        "operationId": "get_all_user_requests_config_request_user_all_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ConfigurationRequestStatus"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/config/request/tenant/all": {
      "get": {
        "tags": [
          "config - request"
        ],
        "summary": "Get All Tenant Request",
        "operationId": "get_all_tenant_request_config_request_tenant_all_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ConfigurationRequestStatus"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/config/request/{request_id}": {
      "get": {
        "tags": [
          "config - request"
        ],
        "summary": "Get Request",
        "operationId": "get_request_config_request__request_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/config/services_package": {
      "get": {
        "tags": [
          "config - services_package"
        ],
        "summary": "Get all services_packages",
        "operationId": "get_services_package_config_services_package_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisibleItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/max_bandwidth": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Get tenants L2 max bandwidth",
        "operationId": "get_tenant_max_bandwidth_tenant__tenant_name__max_bandwidth_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBMaxBandwidthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/contact_info": {
      "patch": {
        "tags": [
          "tenant"
        ],
        "summary": "Modify tenant's contact info",
        "operationId": "update_tenant_contact_info_tenant__tenant_name__contact_info_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateTenantContactInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/services_package": {
      "patch": {
        "tags": [
          "tenant"
        ],
        "summary": "Modify tenant's services package",
        "operationId": "update_tenant_services_package_tenant__tenant_name__services_package_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateTenantServicesPackageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/full_name": {
      "patch": {
        "tags": [
          "tenant"
        ],
        "summary": "Modify tenant's contact info",
        "operationId": "update_tenant_full_name_tenant__tenant_name__full_name_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateTenantFullNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/quota": {
      "put": {
        "tags": [
          "tenant"
        ],
        "summary": "Update Quota",
        "operationId": "update_quota_tenant__tenant_name__quota_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateDataQuotaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/notifications": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Get notifications for each tenant",
        "operationId": "get_tenant_notifications_tenant__tenant_name__notifications_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/all_types": {
      "get": {
        "tags": [
          "tenant - virtual interface"
        ],
        "summary": "Get all virtual interfaces per tenant",
        "operationId": "get_tenant_virtual_interface_all_types_tenant__tenant_name__virtual_interface_all_types_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface": {
      "get": {
        "tags": [
          "tenant - virtual interface"
        ],
        "summary": "Get all virtual interfaces of type bridge domain per tenant",
        "operationId": "get_tenant_virtual_interface_tenant__tenant_name__virtual_interface_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenant - virtual interface"
        ],
        "summary": "Create a new virtual interface for a tenant",
        "operationId": "create_tenant_virtual_interface_tenant__tenant_name__virtual_interface_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBVirtualInterfaceTenantCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/{virtual_interface_name}": {
      "put": {
        "tags": [
          "tenant - virtual interface"
        ],
        "summary": "Update virtual interface",
        "operationId": "update_virtual_interface_tenant__tenant_name__virtual_interface__virtual_interface_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Virtual Interface Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "virtual_interface_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBVirtualInterfaceTenantBridgeDomainUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - virtual interface"
        ],
        "summary": "Delete Tenant Virtual Interface",
        "operationId": "delete_tenant_virtual_interface_tenant__tenant_name__virtual_interface__virtual_interface_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Virtual Interface Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "virtual_interface_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/{virtual_interface_name}/ip_addresses": {
      "patch": {
        "tags": [
          "tenant - virtual interface"
        ],
        "summary": "Modify virtual interface IP addresses",
        "operationId": "edit_bd_ip_addresses_tenant__tenant_name__virtual_interface__virtual_interface_name__ip_addresses_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Virtual Interface Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "virtual_interface_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateVirtualInterfaceAddressesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/gate": {
      "get": {
        "tags": [
          "tenant - virtual interface - gate"
        ],
        "summary": "Get all virtual interfaces per tenant type gate",
        "operationId": "get_tenant_virtual_interface_gate_tenant__tenant_name__virtual_interface_gate_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/ipsec": {
      "get": {
        "tags": [
          "tenant - virtual interface - ipsec"
        ],
        "summary": "Get all virtual interfaces per tenant type ipsec",
        "operationId": "get_tenant_virtual_interface_ipsec_tenant__tenant_name__virtual_interface_ipsec_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenant - virtual interface - ipsec"
        ],
        "summary": "Create a new ipsec virtual interface for a tenant",
        "operationId": "create_tenant_ipsec_virtual_interface_tenant__tenant_name__virtual_interface_ipsec_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBVirtualInterfaceIPSECCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/ipsec/default": {
      "post": {
        "tags": [
          "tenant - virtual interface - ipsec"
        ],
        "summary": "Create a default ipsec virtual interface for a tenant",
        "operationId": "create_default_tenant_ipsec_virtual_interface_tenant__tenant_name__virtual_interface_ipsec_default_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBDefaultVirtualInterfaceIPSECCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/virtual_interface/ipsec/{virtual_interface_name}": {
      "put": {
        "tags": [
          "tenant - virtual interface - ipsec"
        ],
        "summary": "Update virtual interface type ipsec",
        "operationId": "update_virtual_interface_ipsec_tenant__tenant_name__virtual_interface_ipsec__virtual_interface_name__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Virtual Interface Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "virtual_interface_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBVirtualInterfaceIPSECUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - virtual interface - ipsec"
        ],
        "summary": "Delete Tenant Virtual Interface Ipsec",
        "operationId": "delete_tenant_virtual_interface_ipsec_tenant__tenant_name__virtual_interface_ipsec__virtual_interface_name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Virtual Interface Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "virtual_interface_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/aws_access_key": {
      "get": {
        "tags": [
          "tenant - aws"
        ],
        "summary": "Get Tenant Aws Access Key",
        "operationId": "get_tenant_aws_access_key_tenant__tenant_name__aws_access_key_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBAWSAccessKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenant - aws"
        ],
        "summary": "Create Tenant Aws Access Key",
        "operationId": "create_tenant_aws_access_key_tenant__tenant_name__aws_access_key_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSAccessKeyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBAWSAccessKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - aws"
        ],
        "summary": "Delete Tenant Aws Access Key",
        "operationId": "delete_tenant_aws_access_key_tenant__tenant_name__aws_access_key_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBAWSAccessKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/azure_access_key": {
      "get": {
        "tags": [
          "tenant - azure"
        ],
        "summary": "Get Tenant Azure Access Key",
        "operationId": "get_tenant_azure_access_key_tenant__tenant_name__azure_access_key_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureAccessKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenant - azure"
        ],
        "summary": "Create Tenant Azure Access Key",
        "operationId": "create_tenant_azure_access_key_tenant__tenant_name__azure_access_key_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AzureAccessKeyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureAccessKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - azure"
        ],
        "summary": "Delete Tenant Azure Access Key",
        "operationId": "delete_tenant_azure_access_key_tenant__tenant_name__azure_access_key_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureAccessKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/aruba_access_key": {
      "get": {
        "tags": [
          "tenant - aruba"
        ],
        "summary": "Get Tenant Aruba Access Key",
        "operationId": "get_tenant_aruba_access_key_tenant__tenant_name__aruba_access_key_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArubaAccessKeyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenant - aruba"
        ],
        "summary": "Create Tenant Aruba Access Key",
        "operationId": "create_tenant_aruba_access_key_tenant__tenant_name__aruba_access_key_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArubaAccessKeyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArubaAccessKeyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - aruba"
        ],
        "summary": "Delete Tenant Aruba Access Key",
        "operationId": "delete_tenant_aruba_access_key_tenant__tenant_name__aruba_access_key_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/users": {
      "get": {
        "tags": [
          "tenant - users"
        ],
        "summary": "Get tenant user or all tenant users",
        "operationId": "get_users_tenant__tenant_name__users_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Username",
              "type": "string"
            },
            "name": "username",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Users Tenant  Tenant Name  Users Get",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/NBTenantUser"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NBTenantUser"
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "tenant - users"
        ],
        "summary": "Update tenant user",
        "operationId": "update_tenant_user_tenant__tenant_name__users_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenant - users"
        ],
        "summary": "Create new user for tenant",
        "operationId": "create_tenant_user_tenant__tenant_name__users_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBUserCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenant - users"
        ],
        "summary": "Delete user",
        "operationId": "delete_tenant_user_tenant__tenant_name__users_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Username",
              "type": "string"
            },
            "name": "username",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/request_gate_vi": {
      "post": {
        "tags": [
          "tenant - public ip"
        ],
        "summary": "Request a Gate VI",
        "operationId": "create_public_ip_tenant__tenant_name__request_gate_vi_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBPublicIPCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/request_gate_vi/{name}": {
      "delete": {
        "tags": [
          "tenant - public ip"
        ],
        "summary": "Delete Gate VI",
        "operationId": "delete_public_ip_tenant__tenant_name__request_gate_vi__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/dia": {
      "post": {
        "tags": [
          "tenant - dia"
        ],
        "summary": "Request a Gate VI",
        "operationId": "create_dia_tenant__tenant_name__dia_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBDIACreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/tenant/{tenant_name}/dia/{name}": {
      "delete": {
        "tags": [
          "tenant - dia"
        ],
        "summary": "Delete Gate VI",
        "operationId": "delete_dia_tenant__tenant_name__dia__name__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_\\-]+$",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NBRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/niro/niro_branding": {
      "get": {
        "tags": [
          "niro"
        ],
        "summary": "Get Niro Branding",
        "operationId": "get_niro_branding_niro_niro_branding_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIROBranding"
                }
              }
            }
          }
        }
      }
    },
    "/location": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Get Locations",
        "operationId": "get_locations_location_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/sites": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get all sites",
        "operationId": "read_all_sites_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SiteConnectionType"
            },
            "name": "connection_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Operator",
              "type": "string"
            },
            "name": "operator",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Address",
              "type": "string"
            },
            "name": "address",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Cloud Region",
              "type": "string"
            },
            "name": "cloud_region",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Handover Bw",
              "type": "string"
            },
            "name": "handover_bw",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Naas Location",
              "type": "string"
            },
            "name": "naas_location",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Naas System",
              "type": "string"
            },
            "name": "naas_system",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Market Name",
              "type": "string"
            },
            "name": "market_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Market Id",
              "type": "string"
            },
            "name": "market_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sites",
          "sites"
        ],
        "summary": "Create site",
        "operationId": "create_sites_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/sites/{name}/{connection_type}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get specific site",
        "operationId": "read_sites__name___connection_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SiteConnectionType"
            },
            "name": "connection_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sites",
          "sites"
        ],
        "summary": "Modify site",
        "operationId": "update_sites__name___connection_type__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SiteConnectionType"
            },
            "name": "connection_type",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteUpdateData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "sites",
          "sites"
        ],
        "summary": "Delete site",
        "operationId": "delete_sites__name___connection_type__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SiteConnectionType"
            },
            "name": "connection_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/sites/azure_peering_locations": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get all azure nni",
        "operationId": "get_nni_sites_azure_peering_locations_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Peering Location",
              "type": "string"
            },
            "name": "peering_location",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/service/{tenant_name}/events": {
      "get": {
        "tags": [
          "service - orders"
        ],
        "summary": "Get all user events",
        "operationId": "get_events_by_tenant_service__tenant_name__events_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "maxLength": 15,
              "minLength": 2,
              "pattern": "^(?!veth\\d|eth\\d|eno\\d|enp\\d|ens\\d|lo\\d|dummy$|Bridge$|docker\\d|ipkt\\d|br\\-|Vlan\\d|global$|master$|localhost$)[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/orders/catalog": {
      "get": {
        "tags": [
          "service catalog"
        ],
        "summary": "Get all services items ",
        "operationId": "read_all_orders_catalog_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BillingServiceType"
            },
            "name": "product",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Enable",
              "type": "boolean"
            },
            "name": "enable",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Operator",
              "type": "string"
            },
            "name": "operator",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Location",
              "type": "string"
            },
            "name": "location",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Base Quantity",
              "type": "number"
            },
            "name": "base_quantity",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Base Unit",
              "type": "string"
            },
            "name": "base_unit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Contract Period",
              "type": "integer"
            },
            "name": "contract_period",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Additional Unit",
              "type": "string"
            },
            "name": "additional_unit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Discount",
              "type": "integer"
            },
            "name": "discount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Customer Package",
              "type": "string"
            },
            "name": "customer_package",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/orders/terms_and_conditions/all": {
      "get": {
        "tags": [
          "terms and conditions"
        ],
        "summary": "Get all terms and conditions",
        "operationId": "get_all_terms_and_conditions_orders_terms_and_conditions_all_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 0
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/orders/terms_and_conditions": {
      "get": {
        "tags": [
          "terms and conditions"
        ],
        "summary": "Get terms and conditions",
        "operationId": "get_terms_and_conditions_service_orders_terms_and_conditions_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Service",
              "type": "string"
            },
            "name": "service",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "name": "id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Enable",
              "type": "boolean"
            },
            "name": "enable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermsAndConditions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/orders/terms_and_conditions/{tenant_name}/sign": {
      "post": {
        "tags": [
          "terms and conditions"
        ],
        "summary": "Sign Terms",
        "operationId": "sign_terms_orders_terms_and_conditions__tenant_name__sign_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Name",
              "type": "string"
            },
            "name": "tenant_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NBCustomerToTermsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerToTermsAgreement"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/virtual_interface": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get Statistics",
        "operationId": "get_vi_statistics_statistics_virtual_interface_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsRequest_StatisticsMetricsColumns__StatisticsViFilters__StatisticsFlags_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/l2_interface": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get l2 Statistics",
        "operationId": "get_l2_interface_statistics_statistics_l2_interface_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsL2Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/flood_traffic": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get flood traffic Statistics",
        "operationId": "get_flood_traffic_statistics_statistics_flood_traffic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsFloodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/ddos_attack_traffic": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get DDoS attack traffic Statistics",
        "operationId": "get_ddos_traffic_statistics_statistics_ddos_attack_traffic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsDdosAttackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/firewall_traffic": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get firewall traffic Statistics",
        "operationId": "get_firewall_traffic_statistics_statistics_firewall_traffic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsFirewallRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/nat_traffic": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get NAT traffic Statistics",
        "operationId": "get_nat_traffic_statistics_statistics_nat_traffic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsNatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    },
    "/statistics/pbr_traffic": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Get PBR traffic Statistics",
        "operationId": "get_pbr_traffic_statistics_statistics_pbr_traffic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsPbrRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerFromCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AWSAccessKeyCreateRequest": {
        "title": "AWSAccessKeyCreateRequest",
        "required": [
          "access_key_id",
          "secret_access_key"
        ],
        "type": "object",
        "properties": {
          "access_key_id": {
            "title": "Access Key Id",
            "type": "string"
          },
          "secret_access_key": {
            "title": "Secret Access Key",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "AWSBandwidth": {
        "title": "AWSBandwidth",
        "enum": [
          "50000",
          "100000",
          "200000",
          "300000",
          "400000",
          "500000",
          "1000000",
          "2000000",
          "5000000",
          "10000000",
          "25000000"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AdvertisedRoutes": {
        "title": "AdvertisedRoutes",
        "required": [
          "advertisedRoutes",
          "totalPrefixCounter",
          "filteredPrefixCounter"
        ],
        "type": "object",
        "properties": {
          "advertisedRoutes": {
            "title": "Advertisedroutes",
            "type": "object"
          },
          "totalPrefixCounter": {
            "title": "Totalprefixcounter",
            "type": "integer"
          },
          "filteredPrefixCounter": {
            "title": "Filteredprefixcounter",
            "type": "integer"
          }
        }
      },
      "ArubaAccessKeyCreateRequest": {
        "title": "ArubaAccessKeyCreateRequest",
        "required": [
          "access_key",
          "access_secret",
          "end_point"
        ],
        "type": "object",
        "properties": {
          "access_key": {
            "title": "Access Key",
            "type": "string",
            "description": "Username when the access_type is USER/PASSWORD"
          },
          "access_secret": {
            "title": "Access Secret",
            "type": "string",
            "description": "Password when the access_type is USER/PASSWORD"
          },
          "access_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArubaAccessTypes"
              }
            ],
            "default": "user_password"
          },
          "end_point": {
            "title": "End Point",
            "type": "string",
            "description": "End point like `https://your-domain.com/`.Don't append the `gms/rest` to the end-point"
          }
        }
      },
      "ArubaAccessKeyResponse": {
        "title": "ArubaAccessKeyResponse",
        "required": [
          "tenant_name",
          "access_key",
          "end_point"
        ],
        "type": "object",
        "properties": {
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "access_key": {
            "title": "Access Key",
            "type": "string"
          },
          "access_secret": {
            "title": "Access Secret",
            "type": "string"
          },
          "access_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArubaAccessTypes"
              }
            ],
            "default": "user_password"
          },
          "end_point": {
            "title": "End Point",
            "type": "string"
          }
        }
      },
      "ArubaAccessTypes": {
        "title": "ArubaAccessTypes",
        "enum": [
          "user_password"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AuthType": {
        "title": "AuthType",
        "enum": [
          "sha256",
          "sha384",
          "sha512",
          "prfsha256",
          "prfsha384",
          "prfsha512"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AutonomousSystem": {
        "title": "AutonomousSystem",
        "required": [
          "asn",
          "keepalive",
          "hold",
          "tenant_name"
        ],
        "type": "object",
        "properties": {
          "asn": {
            "title": "Asn",
            "type": "integer"
          },
          "keepalive": {
            "title": "Keepalive",
            "type": "integer"
          },
          "hold": {
            "title": "Hold",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          }
        }
      },
      "AwsVpnRequest": {
        "title": "AwsVpnRequest",
        "required": [
          "connection_name",
          "system_name",
          "gate_name",
          "route_type",
          "vpc_id",
          "region"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "gate_name": {
            "title": "Gate Name",
            "type": "string"
          },
          "route_type": {
            "title": "Route Type",
            "type": "boolean"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          },
          "vpc_id": {
            "title": "Vpc Id",
            "type": "string"
          },
          "region": {
            "title": "Region",
            "type": "string"
          }
        }
      },
      "AwsVpnRequestNew": {
        "title": "AwsVpnRequestNew",
        "required": [
          "connection_name",
          "gate_name",
          "vpc_id",
          "region"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "gate_name": {
            "title": "Gate Name",
            "type": "string"
          },
          "route_type": {
            "title": "Route Type",
            "type": "string"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          },
          "vvi_ip": {
            "title": "Vvi Ip",
            "type": "string"
          },
          "vpc_id": {
            "title": "Vpc Id",
            "type": "string"
          },
          "region": {
            "title": "Region",
            "type": "string"
          }
        }
      },
      "AzureAccessKey": {
        "title": "AzureAccessKey",
        "required": [
          "tenant_name",
          "tenant_id",
          "client_id",
          "client_secret",
          "subscription_id"
        ],
        "type": "object",
        "properties": {
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "tenant_id": {
            "title": "Tenant Id",
            "type": "string"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          },
          "subscription_id": {
            "title": "Subscription Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "AzureAccessKeyCreateRequest": {
        "title": "AzureAccessKeyCreateRequest",
        "required": [
          "tenant_id",
          "client_id",
          "client_secret",
          "subscription_id"
        ],
        "type": "object",
        "properties": {
          "tenant_id": {
            "title": "Tenant Id",
            "type": "string"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          },
          "subscription_id": {
            "title": "Subscription Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "AzureVpnRequest": {
        "title": "AzureVpnRequest",
        "required": [
          "connection_name",
          "gate_name",
          "resource_group_name",
          "vnet_name",
          "region"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "gate_name": {
            "title": "Gate Name",
            "type": "string"
          },
          "route_type": {
            "title": "Route Type",
            "type": "string"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          },
          "vvi_ip": {
            "title": "Vvi Ip",
            "type": "string"
          },
          "resource_group_name": {
            "title": "Resource Group Name",
            "type": "string"
          },
          "vnet_name": {
            "title": "Vnet Name",
            "type": "string"
          },
          "region": {
            "title": "Region",
            "type": "string"
          }
        }
      },
      "BGPRouteMapRule": {
        "title": "BGPRouteMapRule",
        "required": [
          "id",
          "route_map_id",
          "name",
          "action",
          "priority"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "route_map_id": {
            "title": "Route Map Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/RouteMapAction"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PfxListItem"
            },
            "default": []
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "BGPStatusData": {
        "title": "BGPStatusData",
        "required": [
          "vrf_name",
          "routed_id",
          "asn",
          "peers"
        ],
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "routed_id": {
            "title": "Routed Id",
            "type": "string"
          },
          "asn": {
            "title": "Asn",
            "type": "integer"
          },
          "peers": {
            "title": "Peers",
            "type": "object"
          }
        }
      },
      "BGPSummeryGetResponse": {
        "title": "BGPSummeryGetResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "object"
          }
        }
      },
      "BaseAutonomousSystem": {
        "title": "BaseAutonomousSystem",
        "required": [
          "asn",
          "keepalive",
          "hold"
        ],
        "type": "object",
        "properties": {
          "asn": {
            "title": "Asn",
            "type": "integer"
          },
          "keepalive": {
            "title": "Keepalive",
            "type": "integer"
          },
          "hold": {
            "title": "Hold",
            "type": "integer"
          }
        }
      },
      "BfdConfig": {
        "title": "BfdConfig",
        "type": "object",
        "properties": {
          "transmit_interval": {
            "title": "Transmit Interval",
            "type": "integer",
            "default": 0
          },
          "receive_interval": {
            "title": "Receive Interval",
            "type": "integer",
            "default": 0
          },
          "detect_multiplier": {
            "title": "Detect Multiplier",
            "type": "integer",
            "default": 0
          },
          "passive_mode": {
            "title": "Passive Mode",
            "type": "boolean",
            "default": false
          }
        }
      },
      "BgpFilteredReceivedRoutes": {
        "title": "BgpFilteredReceivedRoutes",
        "required": [
          "receivedRoutes",
          "totalPrefixCounter",
          "filteredPrefixCounter"
        ],
        "type": "object",
        "properties": {
          "bgpTableVersion": {
            "title": "Bgptableversion",
            "type": "integer"
          },
          "bgpLocalRouterId": {
            "title": "Bgplocalrouterid",
            "type": "string"
          },
          "defaultLocPrf": {
            "title": "Defaultlocprf",
            "type": "integer"
          },
          "localAS": {
            "title": "Localas",
            "type": "integer"
          },
          "receivedRoutes": {
            "title": "Receivedroutes",
            "type": "object"
          },
          "totalPrefixCounter": {
            "title": "Totalprefixcounter",
            "type": "integer"
          },
          "filteredPrefixCounter": {
            "title": "Filteredprefixcounter",
            "type": "integer"
          }
        }
      },
      "BgpIpv4Status": {
        "title": "BgpIpv4Status",
        "required": [
          "ipv4_unicast"
        ],
        "type": "object",
        "properties": {
          "ipv4_unicast": {
            "title": "Ipv4 Unicast",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BGPStatusData"
            }
          }
        }
      },
      "BgpReceivedRoutes": {
        "title": "BgpReceivedRoutes",
        "required": [
          "vrfId",
          "vrfName",
          "tableVersion",
          "routerId",
          "defaultLocPrf",
          "localAS",
          "routes"
        ],
        "type": "object",
        "properties": {
          "vrfId": {
            "title": "Vrfid",
            "type": "integer"
          },
          "vrfName": {
            "title": "Vrfname",
            "type": "string"
          },
          "tableVersion": {
            "title": "Tableversion",
            "type": "integer"
          },
          "routerId": {
            "title": "Routerid",
            "type": "string"
          },
          "defaultLocPrf": {
            "title": "Defaultlocprf",
            "type": "integer"
          },
          "localAS": {
            "title": "Localas",
            "type": "integer"
          },
          "routes": {
            "title": "Routes",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RouteDetail"
              }
            }
          }
        }
      },
      "BgpRestType": {
        "title": "BgpRestType",
        "enum": [
          "hard_reset",
          "reset",
          "soft_reset",
          "soft_in",
          "soft_out"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "BgpStatus": {
        "title": "BgpStatus",
        "required": [
          "dia",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "dia": {
            "$ref": "#/components/schemas/BgpIpv4Status"
          },
          "tenant": {
            "$ref": "#/components/schemas/BgpIpv4Status"
          }
        }
      },
      "BillingServiceType": {
        "title": "BillingServiceType",
        "enum": [
          "dpi",
          "sdr",
          "firewall",
          "dia_fw",
          "ddos",
          "ids",
          "dns",
          "fqdn",
          "tenant_service_package",
          "remote_user",
          "nat",
          "dia",
          "customer_port",
          "connection",
          "direct_connection",
          "cloud_router",
          "dia_connection",
          "direct_cloud_link",
          "cr_cloud_link",
          "direct_elan_connection"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "CloudType": {
        "title": "CloudType",
        "enum": [
          "aws",
          "gcp",
          "azure"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ConfigurationRequestStatus": {
        "title": "ConfigurationRequestStatus",
        "enum": [
          "received",
          "in_progress",
          "success",
          "failed",
          "cancelled"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "CreateNetworkObjectRequest": {
        "title": "CreateNetworkObjectRequest",
        "required": [
          "name",
          "subnets",
          "ports"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "subnets": {
            "title": "Subnets",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ports": {
            "title": "Ports",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CustomerToTermsAgreement": {
        "title": "CustomerToTermsAgreement",
        "required": [
          "user_id",
          "user_name",
          "related_service",
          "version",
          "id",
          "created_at",
          "expiration_time"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "user_name": {
            "title": "User Name",
            "type": "string"
          },
          "tenant_id": {
            "title": "Tenant Id",
            "type": "integer"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "related_service": {
            "title": "Related Service",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "signature_metadata": {
            "title": "Signature Metadata",
            "type": "object"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "expiration_time": {
            "title": "Expiration Time",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Days": {
        "title": "Days",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "EncryptionType": {
        "title": "EncryptionType",
        "enum": [
          "3des",
          "aes128",
          "aes128gcm",
          "aes192",
          "aes256",
          "aes256gcm"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ExecutorResponse": {
        "title": "ExecutorResponse",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          }
        }
      },
      "ExecutorResultResponse": {
        "title": "ExecutorResultResponse",
        "required": [
          "uuid",
          "status"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "title": "Uuid",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "result": {
            "title": "Result",
            "type": "string"
          }
        }
      },
      "FilterType": {
        "title": "FilterType",
        "enum": [
          "src_network",
          "dst_network",
          "src_l4_port",
          "dst_l4_port",
          "ip_protocol",
          "src_segment",
          "dst_segment",
          "src_object",
          "dst_object",
          "src_group",
          "dst_group",
          "ingress_vi",
          "tcp_control",
          "is_fragmented",
          "tos",
          "traffic_class",
          "ttl",
          "hop_limit",
          "ip_version",
          "src_dia",
          "dst_dia"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "FirewallType": {
        "title": "FirewallType",
        "enum": [
          "firewall",
          "dia"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "FloodType": {
        "title": "FloodType",
        "enum": [
          "all",
          "dynamic"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "HAStatus": {
        "title": "HAStatus",
        "enum": [
          "auto",
          "manual",
          "disabled"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IPSecIDType": {
        "title": "IPSecIDType",
        "enum": [
          "ipv4",
          "fqdn",
          "email"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Interconnect": {
        "title": "Interconnect",
        "required": [
          "connection_name",
          "ASN",
          "vlan",
          "tenant_name",
          "cloud_type",
          "bandwidth",
          "cloud_identifier"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "ASN": {
            "title": "Asn",
            "type": "integer"
          },
          "vlan": {
            "title": "Vlan",
            "type": "integer"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "cloud_type": {
            "$ref": "#/components/schemas/CloudType"
          },
          "bandwidth": {
            "title": "Bandwidth",
            "type": "string"
          },
          "cloud_identifier": {
            "title": "Cloud Identifier",
            "type": "string"
          }
        }
      },
      "InterfaceAdministrativeState": {
        "title": "InterfaceAdministrativeState",
        "enum": [
          "unspecified",
          "up",
          "down"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "InterfaceState": {
        "title": "InterfaceState",
        "enum": [
          "up",
          "down"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ItemsList": {
        "title": "ItemsList",
        "required": [
          "items",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {}
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "total_count": {
            "title": "Total Count",
            "type": "integer",
            "default": 0
          }
        }
      },
      "KeycloakToken": {
        "title": "KeycloakToken",
        "required": [
          "access_token"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          }
        },
        "description": "Keycloak representation of a token object\n\nAttributes:\n    access_token (str): An access token"
      },
      "LocationType": {
        "title": "LocationType",
        "enum": [
          "location",
          "system"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "LookingGlassRequestResultParameters": {
        "title": "LookingGlassRequestResultParameters",
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "uuid": {
            "title": "Uuid",
            "type": "string"
          }
        }
      },
      "MTURequestParameters": {
        "title": "MTURequestParameters",
        "required": [
          "address",
          "max_mtu",
          "min_mtu"
        ],
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "max_mtu": {
            "title": "Max Mtu",
            "type": "integer"
          },
          "min_mtu": {
            "title": "Min Mtu",
            "type": "integer"
          }
        }
      },
      "NATRuleType": {
        "title": "NATRuleType",
        "enum": [
          "SOURCE_ONE_TO_ONE",
          "SOURCE_NAT",
          "DESTINATION_NAT",
          "NOP"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NATRuleUpdateData": {
        "title": "NATRuleUpdateData",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "outside": {
            "title": "Outside",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NATSourceType": {
        "title": "NATSourceType",
        "enum": [
          "segment",
          "ip"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NBAWSAccessKey": {
        "title": "NBAWSAccessKey",
        "required": [
          "tenant_name",
          "access_key_id",
          "secret_access_key"
        ],
        "type": "object",
        "properties": {
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "access_key_id": {
            "title": "Access Key Id",
            "type": "string"
          },
          "secret_access_key": {
            "title": "Secret Access Key",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBAWSRequest": {
        "title": "NBAWSRequest",
        "type": "object",
        "properties": {
          "site_name": {
            "title": "Site Name",
            "type": "string"
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          },
          "max_bandwidth": {
            "$ref": "#/components/schemas/AWSBandwidth"
          },
          "aws_customer_port_name": {
            "title": "Aws Customer Port Name",
            "type": "string"
          }
        }
      },
      "NBArubaConnectCreateRequest": {
        "title": "NBArubaConnectCreateRequest",
        "required": [
          "connection_name",
          "gw_name",
          "interface_name",
          "ne_pk",
          "vi_ip_address",
          "gw_ip"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "gw_name": {
            "title": "Gw Name",
            "type": "string"
          },
          "interface_name": {
            "title": "Interface Name",
            "type": "string"
          },
          "ne_pk": {
            "title": "Ne Pk",
            "type": "string"
          },
          "vi_ip_address": {
            "title": "Vi Ip Address",
            "type": "string"
          },
          "gw_ip": {
            "title": "Gw Ip",
            "type": "string"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          }
        }
      },
      "NBArubaDiscoverResponse": {
        "title": "NBArubaDiscoverResponse",
        "type": "object",
        "properties": {
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "gateways": {
            "title": "Gateways",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NBDiscoverDevice"
            },
            "default": []
          }
        }
      },
      "NBAwsInterconnectCreateRequest": {
        "title": "NBAwsInterconnectCreateRequest",
        "required": [
          "connection_name",
          "ASN",
          "vlan",
          "bandwidth",
          "region",
          "account_id"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "ASN": {
            "title": "Asn",
            "type": "integer"
          },
          "vlan": {
            "title": "Vlan",
            "type": "integer"
          },
          "bandwidth": {
            "title": "Bandwidth",
            "type": "string"
          },
          "region": {
            "title": "Region",
            "type": "string"
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          }
        }
      },
      "NBAzureInterconnectCreateRequest": {
        "title": "NBAzureInterconnectCreateRequest",
        "required": [
          "connection_name",
          "ASN",
          "vlan",
          "bandwidth",
          "resource_group",
          "circuit_name"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "ASN": {
            "title": "Asn",
            "type": "integer"
          },
          "vlan": {
            "title": "Vlan",
            "type": "integer"
          },
          "bandwidth": {
            "title": "Bandwidth",
            "type": "string"
          },
          "resource_group": {
            "title": "Resource Group",
            "type": "string"
          },
          "circuit_name": {
            "title": "Circuit Name",
            "type": "string"
          }
        }
      },
      "NBAzureRequest": {
        "title": "NBAzureRequest",
        "type": "object",
        "properties": {
          "azure_customer_port_name": {
            "title": "Azure Customer Port Name",
            "type": "string"
          },
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer"
          },
          "service_key": {
            "title": "Service Key",
            "type": "string"
          },
          "vlan_id": {
            "title": "Vlan Id",
            "type": "integer"
          },
          "administrative_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InterfaceState"
              }
            ],
            "default": "up"
          }
        }
      },
      "NBBGPRouteMap": {
        "title": "NBBGPRouteMap",
        "required": [
          "id",
          "name",
          "is_global"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "is_global": {
            "title": "Is Global",
            "type": "boolean"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "pfx_list": {
            "title": "Pfx List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PfxListItem"
            },
            "default": []
          }
        }
      },
      "NBBGPRouteMapCreateRequest": {
        "title": "NBBGPRouteMapCreateRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "pfx_list": {
            "title": "Pfx List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PfxListItem"
            },
            "default": [
              {
                "ip": "0.0.0.0/0",
                "match": true,
                "seq": 5,
                "le": 32
              }
            ]
          }
        }
      },
      "NBBGPRouteMapRuleCreateRequest": {
        "title": "NBBGPRouteMapRuleCreateRequest",
        "required": [
          "pfx_list_name",
          "action",
          "priority"
        ],
        "type": "object",
        "properties": {
          "pfx_list_name": {
            "title": "Pfx List Name",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/RouteMapAction"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PfxListItem"
            }
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBBaseNATRule": {
        "title": "NBBaseNATRule",
        "required": [
          "id",
          "name",
          "outside"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "rule_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NATRuleType"
              }
            ],
            "default": "SOURCE_ONE_TO_ONE"
          },
          "inside_type": {
            "$ref": "#/components/schemas/NATSourceType"
          },
          "inside": {
            "title": "Inside",
            "type": "string"
          },
          "inside_port": {
            "title": "Inside Port",
            "type": "integer"
          },
          "protocol": {
            "title": "Protocol",
            "type": "integer"
          },
          "outside": {
            "title": "Outside",
            "type": "string"
          },
          "outside_port": {
            "title": "Outside Port",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBBgpResetUpdateRequest": {
        "title": "NBBgpResetUpdateRequest",
        "required": [
          "reset_type"
        ],
        "type": "object",
        "properties": {
          "reset_type": {
            "$ref": "#/components/schemas/BgpRestType"
          }
        }
      },
      "NBConnectionCreateRequest": {
        "title": "NBConnectionCreateRequest",
        "required": [
          "vi_name",
          "internet"
        ],
        "type": "object",
        "properties": {
          "vi_name": {
            "title": "Vi Name",
            "type": "string"
          },
          "virtual_interface_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualInterfaceType"
              }
            ],
            "default": "routed"
          },
          "ip_addresses": {
            "title": "Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "mtu": {
            "title": "Mtu",
            "type": "integer"
          },
          "administrative_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InterfaceState"
              }
            ],
            "default": "up"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "customer_ports_request": {
            "title": "Customer Ports Request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NBCustomerPortRequest"
            },
            "default": []
          },
          "azure_ports_request": {
            "title": "Azure Ports Request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NBAzureRequest"
            },
            "default": []
          },
          "aws_ports_request": {
            "title": "Aws Ports Request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NBAWSRequest"
            },
            "default": []
          },
          "gcp_ports_request": {
            "title": "Gcp Ports Request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NBGCPRequest"
            },
            "default": []
          },
          "internet": {
            "title": "Internet",
            "type": "boolean"
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          }
        }
      },
      "NBCreateASNRequest": {
        "title": "NBCreateASNRequest",
        "required": [
          "asn"
        ],
        "type": "object",
        "properties": {
          "asn": {
            "title": "Asn",
            "type": "integer"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          }
        }
      },
      "NBCreateAutonomousSystemRequest": {
        "title": "NBCreateAutonomousSystemRequest",
        "required": [
          "asn"
        ],
        "type": "object",
        "properties": {
          "asn": {
            "title": "Asn",
            "type": "integer"
          },
          "keepalive": {
            "title": "Keepalive",
            "type": "integer",
            "default": 60
          },
          "hold": {
            "title": "Hold",
            "type": "integer",
            "default": 180
          }
        }
      },
      "NBCreateBGPNeighborRequest": {
        "title": "NBCreateBGPNeighborRequest",
        "required": [
          "remote_asn",
          "remote_router_ip"
        ],
        "type": "object",
        "properties": {
          "remote_asn": {
            "title": "Remote Asn",
            "type": "integer"
          },
          "remote_router_ip": {
            "title": "Remote Router Ip",
            "type": "string"
          },
          "update_source": {
            "title": "Update Source",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passive": {
            "title": "Passive",
            "type": "boolean",
            "default": false
          },
          "pfx_list_in": {
            "title": "Pfx List In",
            "type": "string"
          },
          "pfx_list_out": {
            "title": "Pfx List Out",
            "type": "string"
          },
          "max_pfx_in": {
            "title": "Max Pfx In",
            "maximum": 1000.0,
            "minimum": 0.0,
            "type": "integer",
            "default": 1000
          },
          "max_pfx_out": {
            "title": "Max Pfx Out",
            "maximum": 1000.0,
            "minimum": 0.0,
            "type": "integer",
            "default": 1000
          },
          "keepalive": {
            "title": "Keepalive",
            "type": "integer"
          },
          "hold": {
            "title": "Hold",
            "type": "integer"
          },
          "open_delay": {
            "title": "Open Delay",
            "type": "integer",
            "default": 0
          },
          "shutdown": {
            "title": "Shutdown",
            "type": "boolean",
            "default": false
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "bfd_config": {
            "$ref": "#/components/schemas/BfdConfig"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          }
        }
      },
      "NBCreateEnabledServiceRequest": {
        "title": "NBCreateEnabledServiceRequest",
        "required": [
          "services"
        ],
        "type": "object",
        "properties": {
          "services": {
            "title": "Services",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      "NBCreateFirewallRuleDiaRequest": {
        "title": "NBCreateFirewallRuleDiaRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "forwarding_policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NBForwardingPolicy"
              }
            ],
            "default": "ALLOW"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "policy_name": {
            "title": "Policy Name",
            "type": "string"
          },
          "time_policies_names": {
            "title": "Time Policies Names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "gate_vi_names": {
            "title": "Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "force_all_gw": {
            "title": "Force All Gw",
            "type": "boolean",
            "default": false
          }
        }
      },
      "NBCreateFirewallRuleRequest": {
        "title": "NBCreateFirewallRuleRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "forwarding_policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NBForwardingPolicy"
              }
            ],
            "default": "ALLOW"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "policy_name": {
            "title": "Policy Name",
            "type": "string"
          },
          "time_policies_names": {
            "title": "Time Policies Names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "NBCreateNATRuleRequest": {
        "title": "NBCreateNATRuleRequest",
        "required": [
          "name",
          "outside"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "rule_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NATRuleType"
              }
            ],
            "default": "SOURCE_ONE_TO_ONE"
          },
          "inside_type": {
            "$ref": "#/components/schemas/NATSourceType"
          },
          "inside": {
            "title": "Inside",
            "type": "string"
          },
          "inside_port": {
            "title": "Inside Port",
            "type": "integer"
          },
          "protocol": {
            "title": "Protocol",
            "type": "integer"
          },
          "outside": {
            "title": "Outside",
            "type": "string"
          },
          "outside_port": {
            "title": "Outside Port",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBCreatePBMRuleRequest": {
        "title": "NBCreatePBMRuleRequest",
        "required": [
          "name",
          "count"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PBMMeteringUnits"
              }
            ],
            "default": "kps"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBCreatePBRRuleRequest": {
        "title": "NBCreatePBRRuleRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "gateway_ip_address": {
            "title": "Gateway Ip Address",
            "type": "string"
          },
          "gateway_interface": {
            "title": "Gateway Interface",
            "type": "string"
          },
          "gateway_MAC": {
            "title": "Gateway Mac",
            "type": "string"
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PBRAction"
              }
            ],
            "default": "ROUTE"
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBCreateStaticRouteRequest": {
        "title": "NBCreateStaticRouteRequest",
        "required": [
          "destination"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "title": "Destination",
            "type": "string"
          },
          "gateway_ip_address": {
            "title": "Gateway Ip Address",
            "type": "string"
          },
          "gateway_interface": {
            "title": "Gateway Interface",
            "type": "string"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "distance": {
            "title": "Distance",
            "maximum": 255.0,
            "minimum": 1.0,
            "type": "integer",
            "default": 1
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBCreateTenantGroupRequest": {
        "title": "NBCreateTenantGroupRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "subnets": {
            "title": "Subnets",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "users": {
            "title": "Users",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "NBCustomerPortRequest": {
        "title": "NBCustomerPortRequest",
        "required": [
          "customer_port_name"
        ],
        "type": "object",
        "properties": {
          "vlan_id": {
            "title": "Vlan Id",
            "type": "integer"
          },
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer",
            "default": 0
          },
          "customer_port_name": {
            "title": "Customer Port Name",
            "type": "string"
          }
        }
      },
      "NBCustomerToTermsCreateRequest": {
        "title": "NBCustomerToTermsCreateRequest",
        "required": [
          "related_service",
          "terms_id",
          "service_id"
        ],
        "type": "object",
        "properties": {
          "signature_metadata": {
            "title": "Signature Metadata",
            "type": "object"
          },
          "related_service": {
            "title": "Related Service",
            "type": "string"
          },
          "terms_id": {
            "title": "Terms Id",
            "type": "integer"
          },
          "service_id": {
            "title": "Service Id",
            "type": "integer"
          }
        }
      },
      "NBDIACreateRequest": {
        "title": "NBDIACreateRequest",
        "required": [
          "system_name",
          "name",
          "ipsec_service",
          "nat_service",
          "snat_service",
          "shared"
        ],
        "type": "object",
        "properties": {
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "ipv4_prefix_length": {
            "title": "Ipv4 Prefix Length",
            "type": "integer"
          },
          "ipv6_prefix_length": {
            "title": "Ipv6 Prefix Length",
            "type": "integer"
          },
          "ipsec_service": {
            "title": "Ipsec Service",
            "type": "boolean"
          },
          "nat_service": {
            "title": "Nat Service",
            "type": "boolean"
          },
          "snat_service": {
            "title": "Snat Service",
            "type": "boolean"
          },
          "shared": {
            "title": "Shared",
            "type": "boolean"
          },
          "ip_addresses": {
            "title": "Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bgp_asn": {
            "title": "Bgp Asn",
            "type": "integer"
          },
          "administrative_state": {
            "$ref": "#/components/schemas/InterfaceAdministrativeState"
          },
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "bfd_config": {
            "$ref": "#/components/schemas/BfdConfig"
          }
        }
      },
      "NBDefaultVirtualInterfaceIPSECCreateRequest": {
        "title": "NBDefaultVirtualInterfaceIPSECCreateRequest",
        "required": [
          "name",
          "remote_ip",
          "remote_networks",
          "local_networks",
          "virtual_interface_gate_name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 63,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string"
          },
          "remote_ip": {
            "title": "Remote Ip",
            "type": "string"
          },
          "remote_networks": {
            "title": "Remote Networks",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "local_networks": {
            "title": "Local Networks",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "virtual_interface_gate_name": {
            "title": "Virtual Interface Gate Name",
            "type": "string"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          }
        }
      },
      "NBDeleteStaticRouteRequest": {
        "title": "NBDeleteStaticRouteRequest",
        "required": [
          "destination"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "title": "Destination",
            "type": "string"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "gateway_ip_address": {
            "title": "Gateway Ip Address",
            "type": "string"
          },
          "gateway_interface": {
            "title": "Gateway Interface",
            "type": "string"
          }
        }
      },
      "NBDiscoverDevice": {
        "title": "NBDiscoverDevice",
        "type": "object",
        "properties": {
          "host_name": {
            "title": "Host Name",
            "type": "string"
          },
          "ip": {
            "title": "Ip",
            "type": "string"
          },
          "device_country": {
            "title": "Device Country",
            "type": "string"
          },
          "device_city": {
            "title": "Device City",
            "type": "string"
          },
          "ne_pk": {
            "title": "Ne Pk",
            "type": "string"
          },
          "interface_data": {
            "title": "Interface Data",
            "type": "object"
          }
        }
      },
      "NBDuplicateIpFloodDiaRequest": {
        "title": "NBDuplicateIpFloodDiaRequest",
        "required": [
          "gate_vi_name",
          "prefix"
        ],
        "type": "object",
        "properties": {
          "option": {
            "title": "Option",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "prefix": {
            "title": "Prefix",
            "type": "string"
          }
        }
      },
      "NBEnabledServiceResponse": {
        "title": "NBEnabledServiceResponse",
        "required": [
          "services"
        ],
        "type": "object",
        "properties": {
          "services": {
            "title": "Services",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      "NBFirewallRuleResponse": {
        "title": "NBFirewallRuleResponse",
        "required": [
          "id",
          "name",
          "enable"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string"
          },
          "user_ip_address": {
            "title": "User Ip Address",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "forwarding_policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NBForwardingPolicy"
              }
            ],
            "default": "ALLOW"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policy_name": {
            "title": "Policy Name",
            "type": "string"
          },
          "time_policies": {
            "title": "Time Policies",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NBTimePolicy"
            },
            "default": []
          },
          "gate_vi_names": {
            "title": "Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          }
        }
      },
      "NBForwardingPolicy": {
        "title": "NBForwardingPolicy",
        "enum": [
          "ACCEPT",
          "DROP",
          "ALLOW",
          "DENY",
          "ALLOW_WITH_BLOCKED_SNI",
          "ALLOW_ONLY_SELECTED_SNIS"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NBGCPInterconnectCreateRequest": {
        "title": "NBGCPInterconnectCreateRequest",
        "required": [
          "connection_name",
          "ASN",
          "vlan",
          "bandwidth",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "connection_name": {
            "title": "Connection Name",
            "type": "string"
          },
          "ASN": {
            "title": "Asn",
            "type": "integer"
          },
          "vlan": {
            "title": "Vlan",
            "type": "integer"
          },
          "bandwidth": {
            "title": "Bandwidth",
            "type": "string"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string"
          }
        }
      },
      "NBGCPRequest": {
        "title": "NBGCPRequest",
        "type": "object",
        "properties": {
          "customer_port_name": {
            "title": "Customer Port Name",
            "type": "string"
          },
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer"
          },
          "region": {
            "title": "Region",
            "type": "string"
          },
          "primary_pairing_key": {
            "title": "Primary Pairing Key",
            "type": "string"
          },
          "secondary_pairing_key": {
            "title": "Secondary Pairing Key",
            "type": "string"
          }
        }
      },
      "NBGroupResponse": {
        "title": "NBGroupResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "users": {
            "title": "Users",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subnets": {
            "title": "Subnets",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ip_addresses": {
            "title": "Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NBMaxBandwidthResponse": {
        "title": "NBMaxBandwidthResponse",
        "required": [
          "max_bandwidth"
        ],
        "type": "object",
        "properties": {
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer"
          }
        }
      },
      "NBNeighbor": {
        "title": "NBNeighbor",
        "required": [
          "remote_router_ip",
          "remote_asn",
          "max_pfx_in",
          "max_pfx_out",
          "open_delay",
          "shutdown",
          "id",
          "autonomous_system_id",
          "autonomous_system"
        ],
        "type": "object",
        "properties": {
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "remote_router_ip": {
            "title": "Remote Router Ip",
            "type": "string"
          },
          "remote_asn": {
            "title": "Remote Asn",
            "type": "integer"
          },
          "update_source": {
            "title": "Update Source",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passive": {
            "title": "Passive",
            "type": "boolean",
            "default": false
          },
          "route_map_in_id": {
            "title": "Route Map In Id",
            "type": "integer"
          },
          "route_map_out_id": {
            "title": "Route Map Out Id",
            "type": "integer"
          },
          "max_pfx_in": {
            "title": "Max Pfx In",
            "type": "integer"
          },
          "max_pfx_out": {
            "title": "Max Pfx Out",
            "type": "integer"
          },
          "keepalive": {
            "title": "Keepalive",
            "type": "integer"
          },
          "hold": {
            "title": "Hold",
            "type": "integer"
          },
          "open_delay": {
            "title": "Open Delay",
            "type": "integer"
          },
          "shutdown": {
            "title": "Shutdown",
            "type": "boolean"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "bfd_config": {
            "$ref": "#/components/schemas/BfdConfig"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "autonomous_system_id": {
            "title": "Autonomous System Id",
            "type": "integer"
          },
          "autonomous_system": {
            "$ref": "#/components/schemas/AutonomousSystem"
          },
          "connected_vi": {
            "title": "Connected Vi",
            "type": "string",
            "default": ""
          },
          "pfx_list_in": {
            "title": "Pfx List In",
            "type": "string"
          },
          "pfx_list_out": {
            "title": "Pfx List Out",
            "type": "string"
          },
          "is_dia": {
            "title": "Is Dia",
            "type": "boolean",
            "default": false
          }
        }
      },
      "NBNeighborUpdateData": {
        "title": "NBNeighborUpdateData",
        "type": "object",
        "properties": {
          "pfx_list_in": {
            "title": "Pfx List In",
            "type": "string"
          },
          "pfx_list_out": {
            "title": "Pfx List Out",
            "type": "string"
          },
          "passive": {
            "title": "Passive",
            "type": "boolean"
          },
          "update_source": {
            "title": "Update Source",
            "type": "string"
          },
          "max_pfx_in": {
            "title": "Max Pfx In",
            "maximum": 1000.0,
            "minimum": 0.0,
            "type": "integer"
          },
          "max_pfx_out": {
            "title": "Max Pfx Out",
            "maximum": 1000.0,
            "minimum": 0.0,
            "type": "integer"
          },
          "keepalive": {
            "title": "Keepalive",
            "type": "integer"
          },
          "hold": {
            "title": "Hold",
            "type": "integer"
          },
          "open_delay": {
            "title": "Open Delay",
            "type": "integer"
          },
          "shutdown": {
            "title": "Shutdown",
            "type": "boolean"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "bfd_config": {
            "$ref": "#/components/schemas/BfdConfig"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          }
        }
      },
      "NBNetworkSegmentResponse": {
        "title": "NBNetworkSegmentResponse",
        "required": [
          "name",
          "prefixes"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "prefixes": {
            "title": "Prefixes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkSegmentPrefix"
            }
          }
        }
      },
      "NBNetworkSegmentUpdateDataRequest": {
        "title": "NBNetworkSegmentUpdateDataRequest",
        "type": "object",
        "properties": {
          "delete_prefixes": {
            "title": "Delete Prefixes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkSegmentPrefix"
            },
            "default": []
          }
        }
      },
      "NBPBMRuleResponse": {
        "title": "NBPBMRuleResponse",
        "required": [
          "id",
          "name",
          "count",
          "unit",
          "labels"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "unit": {
            "$ref": "#/components/schemas/PBMMeteringUnits"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBPBRRuleResponse": {
        "title": "NBPBRRuleResponse",
        "required": [
          "id",
          "name",
          "tenant_name",
          "vrf_name",
          "gateway_vrf_name",
          "labels"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer",
            "default": 1
          },
          "enable": {
            "title": "Enable",
            "type": "boolean",
            "default": true
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            },
            "default": []
          },
          "gateway_ip_address": {
            "title": "Gateway Ip Address",
            "type": "string"
          },
          "gateway_interface": {
            "title": "Gateway Interface",
            "type": "string"
          },
          "gateway_MAC": {
            "title": "Gateway Mac",
            "type": "string"
          },
          "gateway_vrf_name": {
            "title": "Gateway Vrf Name",
            "type": "string"
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PBRAction"
              }
            ],
            "default": "ROUTE"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBPolicyCreateRequest": {
        "title": "NBPolicyCreateRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "forwarding_policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NBForwardingPolicy"
              }
            ],
            "default": "ALLOW"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "NBPolicyUpdateRequest": {
        "title": "NBPolicyUpdateRequest",
        "type": "object",
        "properties": {
          "forwarding_policy": {
            "$ref": "#/components/schemas/NBForwardingPolicy"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_categories": {
            "title": "Add Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_categories": {
            "title": "Remove Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_allowed_domains": {
            "title": "Add Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_allowed_domains": {
            "title": "Remove Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_denied_domains": {
            "title": "Add Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_denied_domains": {
            "title": "Remove Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NBPublicIPCreateRequest": {
        "title": "NBPublicIPCreateRequest",
        "required": [
          "system_name",
          "name",
          "type",
          "ipsec_service",
          "nat_service",
          "snat_service",
          "shared"
        ],
        "type": "object",
        "properties": {
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PublicIPType"
          },
          "data": {
            "title": "Data",
            "type": "string"
          },
          "ipsec_service": {
            "title": "Ipsec Service",
            "type": "boolean"
          },
          "nat_service": {
            "title": "Nat Service",
            "type": "boolean"
          },
          "snat_service": {
            "title": "Snat Service",
            "type": "boolean"
          },
          "shared": {
            "title": "Shared",
            "type": "boolean"
          }
        }
      },
      "NBRequestCustomerPortRequest": {
        "title": "NBRequestCustomerPortRequest",
        "required": [
          "system_name",
          "name"
        ],
        "type": "object",
        "properties": {
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer",
            "default": 0
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          }
        }
      },
      "NBRequestResponse": {
        "title": "NBRequestResponse",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ConfigurationRequestStatus"
          },
          "extra_details": {
            "title": "Extra Details",
            "type": "object"
          }
        }
      },
      "NBSDR": {
        "title": "NBSDR",
        "required": [
          "is_enable",
          "rate"
        ],
        "type": "object",
        "properties": {
          "is_enable": {
            "title": "Is Enable",
            "type": "boolean"
          },
          "rate": {
            "title": "Rate",
            "type": "integer"
          }
        }
      },
      "NBSystemResponse": {
        "title": "NBSystemResponse",
        "required": [
          "name",
          "status",
          "location",
          "nodes"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "active_node": {
            "title": "Active Node",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "wg_conf": {
            "title": "Wg Conf",
            "type": "object",
            "default": {}
          },
          "nodes": {
            "title": "Nodes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Node"
            }
          }
        }
      },
      "NBTenantAWSDirectConnectCreateRequest": {
        "title": "NBTenantAWSDirectConnectCreateRequest",
        "required": [
          "vi_name"
        ],
        "type": "object",
        "properties": {
          "vi_name": {
            "title": "Vi Name",
            "type": "string"
          },
          "site_name": {
            "title": "Site Name",
            "type": "string"
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          },
          "max_bandwidth": {
            "$ref": "#/components/schemas/AWSBandwidth"
          },
          "aws_customer_port_name": {
            "title": "Aws Customer Port Name",
            "type": "string"
          }
        }
      },
      "NBTenantIPAM": {
        "title": "NBTenantIPAM",
        "required": [
          "available_prefixes"
        ],
        "type": "object",
        "properties": {
          "available_prefixes": {
            "title": "Available Prefixes",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "NBTenantL2CreateRequest": {
        "title": "NBTenantL2CreateRequest",
        "required": [
          "vi_name"
        ],
        "type": "object",
        "properties": {
          "vi_name": {
            "title": "Vi Name",
            "type": "string"
          },
          "vlan_id": {
            "title": "Vlan Id",
            "type": "integer"
          },
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer",
            "default": 0
          }
        }
      },
      "NBTenantL2UpdateRequest": {
        "title": "NBTenantL2UpdateRequest",
        "type": "object",
        "properties": {
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer",
            "default": 0
          }
        }
      },
      "NBTenantUpdateASNRequest": {
        "title": "NBTenantUpdateASNRequest",
        "type": "object",
        "properties": {
          "labels": {
            "title": "Labels",
            "type": "object"
          }
        }
      },
      "NBTenantUser": {
        "title": "NBTenantUser",
        "required": [
          "id",
          "username",
          "email",
          "enabled",
          "password_is_expired",
          "remaining_failed_attempts"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "is_remote_user": {
            "title": "Is Remote User",
            "type": "boolean",
            "default": false
          },
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          },
          "password_is_expired": {
            "title": "Password Is Expired",
            "type": "boolean"
          },
          "remaining_failed_attempts": {
            "title": "Remaining Failed Attempts",
            "type": "integer"
          },
          "user_groups": {
            "title": "User Groups",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NBTimePolicy": {
        "title": "NBTimePolicy",
        "required": [
          "name",
          "action",
          "days",
          "start_time",
          "end_time"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/TimePolicyActions"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Days"
            }
          },
          "start_time": {
            "title": "Start Time",
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "title": "End Time",
            "type": "string",
            "format": "time"
          }
        }
      },
      "NBTimePolicyCreateRequest": {
        "title": "NBTimePolicyCreateRequest",
        "required": [
          "name",
          "action",
          "days",
          "start_time",
          "end_time"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/TimePolicyActions"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Days"
            }
          },
          "start_time": {
            "title": "Start Time",
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "title": "End Time",
            "type": "string",
            "format": "time"
          }
        }
      },
      "NBUpdateCustomerPortRequest": {
        "title": "NBUpdateCustomerPortRequest",
        "type": "object",
        "properties": {
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "max_bandwidth": {
            "title": "Max Bandwidth",
            "type": "integer"
          }
        }
      },
      "NBUpdateDIAFirewallRuleRequest": {
        "title": "NBUpdateDIAFirewallRuleRequest",
        "type": "object",
        "properties": {
          "force_all_gw": {
            "title": "Force All Gw",
            "type": "boolean"
          },
          "gate_vi_names": {
            "title": "Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_gate_vi_names": {
            "title": "Add Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_gate_vi_names": {
            "title": "Remove Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NBUpdateDataQuotaRequest": {
        "title": "NBUpdateDataQuotaRequest",
        "type": "object",
        "properties": {
          "fw_rules": {
            "title": "Fw Rules",
            "type": "integer"
          },
          "nat_rules": {
            "title": "Nat Rules",
            "type": "integer"
          },
          "bgp_neighbors": {
            "title": "Bgp Neighbors",
            "type": "integer"
          }
        }
      },
      "NBUpdateDescriptionRequest": {
        "title": "NBUpdateDescriptionRequest",
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBUpdateEnableRequest": {
        "title": "NBUpdateEnableRequest",
        "required": [
          "enable"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "title": "Enable",
            "type": "boolean"
          }
        }
      },
      "NBUpdateFirewallRuleFiltersRequest": {
        "title": "NBUpdateFirewallRuleFiltersRequest",
        "required": [
          "filters"
        ],
        "type": "object",
        "properties": {
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            }
          }
        }
      },
      "NBUpdateFirewallRuleForwardingPolicyRequest": {
        "title": "NBUpdateFirewallRuleForwardingPolicyRequest",
        "type": "object",
        "properties": {
          "forwarding_policy": {
            "$ref": "#/components/schemas/NBForwardingPolicy"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_categories": {
            "title": "Add Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_categories": {
            "title": "Remove Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_allowed_domains": {
            "title": "Add Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_allowed_domains": {
            "title": "Remove Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_denied_domains": {
            "title": "Add Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_denied_domains": {
            "title": "Remove Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policy_name": {
            "title": "Policy Name",
            "type": "string"
          }
        }
      },
      "NBUpdateFirewallRuleNameRequest": {
        "title": "NBUpdateFirewallRuleNameRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "NBUpdateFirewallRulePriorityRequest": {
        "title": "NBUpdateFirewallRulePriorityRequest",
        "required": [
          "priority"
        ],
        "type": "object",
        "properties": {
          "priority": {
            "title": "Priority",
            "type": "integer"
          }
        }
      },
      "NBUpdateFirewallRuleRequest": {
        "title": "NBUpdateFirewallRuleRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            }
          },
          "forwarding_policy": {
            "$ref": "#/components/schemas/NBForwardingPolicy"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_domains": {
            "title": "Allowed Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denied_domains": {
            "title": "Denied Domains",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policy_name": {
            "title": "Policy Name",
            "type": "string"
          },
          "add_time_policies": {
            "title": "Add Time Policies",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_time_policies": {
            "title": "Remove Time Policies",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_gate_vi_names": {
            "title": "Add Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_gate_vi_names": {
            "title": "Remove Gate Vi Names",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NBUpdateIpFloodDiaRequest": {
        "title": "NBUpdateIpFloodDiaRequest",
        "type": "object",
        "properties": {
          "option_name": {
            "title": "Option Name",
            "type": "string"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          }
        }
      },
      "NBUpdateMitigationRequest": {
        "title": "NBUpdateMitigationRequest",
        "type": "object",
        "properties": {
          "enable": {
            "title": "Enable",
            "type": "boolean"
          }
        }
      },
      "NBUpdatePBMRuleRequest": {
        "title": "NBUpdatePBMRuleRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            }
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "unit": {
            "$ref": "#/components/schemas/PBMMeteringUnits"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBUpdatePBRRuleRequest": {
        "title": "NBUpdatePBRRuleRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFilter"
            }
          },
          "action": {
            "$ref": "#/components/schemas/PBRAction"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBUpdateTenantContactInfoRequest": {
        "title": "NBUpdateTenantContactInfoRequest",
        "type": "object",
        "properties": {
          "contact_info": {
            "title": "Contact Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/TenantContactInfo"
              }
            ],
            "default": {}
          }
        }
      },
      "NBUpdateTenantFullNameRequest": {
        "title": "NBUpdateTenantFullNameRequest",
        "type": "object",
        "properties": {
          "full_name": {
            "title": "Full Name",
            "type": "string"
          }
        }
      },
      "NBUpdateTenantGroupRequest": {
        "title": "NBUpdateTenantGroupRequest",
        "type": "object",
        "properties": {
          "subnets": {
            "title": "Subnets",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "users": {
            "title": "Users",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "NBUpdateTenantServicesPackageRequest": {
        "title": "NBUpdateTenantServicesPackageRequest",
        "type": "object",
        "properties": {
          "services_package_name": {
            "title": "Services Package Name",
            "type": "string"
          }
        }
      },
      "NBUpdateUserBaseData": {
        "title": "NBUpdateUserBaseData",
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "default": ""
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "default": ""
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "default": ""
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "default": ""
          },
          "description": {
            "title": "Description",
            "type": "string",
            "default": ""
          }
        }
      },
      "NBUpdateUserData": {
        "title": "NBUpdateUserData",
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "default": ""
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "default": ""
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "default": ""
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "default": ""
          },
          "description": {
            "title": "Description",
            "type": "string",
            "default": ""
          },
          "password": {
            "title": "Password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          },
          "password_is_expired": {
            "title": "Password Is Expired",
            "type": "boolean"
          },
          "is_remote_user": {
            "title": "Is Remote User",
            "type": "boolean"
          }
        }
      },
      "NBUpdateUserRequest": {
        "title": "NBUpdateUserRequest",
        "required": [
          "username",
          "data"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/NBUpdateUserData"
          }
        }
      },
      "NBUpdateVirtualInterfaceAddressesRequest": {
        "title": "NBUpdateVirtualInterfaceAddressesRequest",
        "type": "object",
        "properties": {
          "add_ip_addresses": {
            "title": "Add Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "delete_ip_addresses": {
            "title": "Delete Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "NBUserCreateRequest": {
        "title": "NBUserCreateRequest",
        "required": [
          "username",
          "password",
          "email",
          "role"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "default": ""
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "default": ""
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "default": ""
          },
          "description": {
            "title": "Description",
            "type": "string",
            "default": ""
          },
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "default": true
          },
          "password_is_expired": {
            "title": "Password Is Expired",
            "type": "boolean",
            "default": false
          },
          "is_remote_user": {
            "title": "Is Remote User",
            "type": "boolean",
            "default": false
          }
        }
      },
      "NBVirtualInterfaceCreateType": {
        "title": "NBVirtualInterfaceCreateType",
        "enum": [
          "bridged",
          "routed",
          "loopback"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NBVirtualInterfaceIPSECCreateRequest": {
        "title": "NBVirtualInterfaceIPSECCreateRequest",
        "required": [
          "name",
          "remote_ip",
          "remote_networks",
          "local_networks",
          "psk",
          "virtual_interface_gate_name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 63,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string"
          },
          "remote_ip": {
            "title": "Remote Ip",
            "type": "string"
          },
          "ip_addresses": {
            "title": "Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "remote_networks": {
            "title": "Remote Networks",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "local_networks": {
            "title": "Local Networks",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dh_groups": {
            "title": "Dh Groups",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": [
              18
            ]
          },
          "encryption": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptionType"
              }
            ],
            "default": "aes256gcm"
          },
          "auth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthType"
              }
            ],
            "default": "prfsha256"
          },
          "psk": {
            "title": "Psk",
            "type": "string"
          },
          "passive": {
            "title": "Passive",
            "type": "boolean",
            "default": false
          },
          "udp_encap": {
            "title": "Udp Encap",
            "type": "boolean",
            "default": false
          },
          "nat_traversal": {
            "title": "Nat Traversal",
            "type": "boolean",
            "default": true
          },
          "local_id_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPSecIDType"
              }
            ],
            "default": "ipv4"
          },
          "local_id_data": {
            "title": "Local Id Data",
            "type": "string",
            "default": ""
          },
          "remote_id_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPSecIDType"
              }
            ],
            "default": "ipv4"
          },
          "remote_id_data": {
            "title": "Remote Id Data",
            "type": "string",
            "default": ""
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "administrative_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InterfaceState"
              }
            ],
            "default": "up"
          },
          "virtual_interface_gate_name": {
            "title": "Virtual Interface Gate Name",
            "type": "string"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          }
        }
      },
      "NBVirtualInterfaceIPSECUpdateRequest": {
        "title": "NBVirtualInterfaceIPSECUpdateRequest",
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "type": "string"
          },
          "add_network_segments": {
            "title": "Add Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "delete_network_segments": {
            "title": "Delete Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "add_ip_addresses": {
            "title": "Add Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "delete_ip_addresses": {
            "title": "Delete Ip Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          }
        }
      },
      "NBVirtualInterfaceTenantBridgeDomainUpdateRequest": {
        "title": "NBVirtualInterfaceTenantBridgeDomainUpdateRequest",
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "type": "string"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          }
        }
      },
      "NBVirtualInterfaceTenantCreateRequest": {
        "title": "NBVirtualInterfaceTenantCreateRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 63,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string"
          },
          "virtual_interface_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NBVirtualInterfaceCreateType"
              }
            ],
            "default": "routed"
          },
          "ipv4_addresses": {
            "title": "Ipv4 Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "ipv6_addresses": {
            "title": "Ipv6 Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "mtu": {
            "title": "Mtu",
            "type": "integer",
            "default": 9220
          },
          "administrative_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InterfaceState"
              }
            ],
            "default": "up"
          },
          "network_segments": {
            "title": "Network Segments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "default": {}
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          }
        }
      },
      "NBWGConnectionType": {
        "title": "NBWGConnectionType",
        "enum": [
          "wired",
          "wireless",
          "ppp"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NBWGTrustStatus": {
        "title": "NBWGTrustStatus",
        "enum": [
          "trusted",
          "untrusted"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NBWGTunnel": {
        "title": "NBWGTunnel",
        "required": [
          "public_key",
          "tunnel_ip"
        ],
        "type": "object",
        "properties": {
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "user_name": {
            "title": "User Name",
            "type": "string"
          },
          "tunnel_id": {
            "title": "Tunnel Id",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "system_location": {
            "title": "System Location",
            "type": "string"
          },
          "public_key": {
            "title": "Public Key",
            "type": "string"
          },
          "tunnel_ip": {
            "title": "Tunnel Ip",
            "type": "string"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBWGTunnelConfResponse": {
        "title": "NBWGTunnelConfResponse",
        "required": [
          "tunnel_id",
          "tunnel_ip",
          "tunnel_private_key",
          "tunnel_DNS",
          "public_key",
          "psk",
          "allowed_ips",
          "untrusted_allowed_ips",
          "remote_ip",
          "remote_port"
        ],
        "type": "object",
        "properties": {
          "tunnel_id": {
            "title": "Tunnel Id",
            "type": "string"
          },
          "tunnel_ip": {
            "title": "Tunnel Ip",
            "type": "string"
          },
          "tunnel_private_key": {
            "title": "Tunnel Private Key",
            "type": "string"
          },
          "tunnel_DNS": {
            "title": "Tunnel Dns",
            "type": "string"
          },
          "public_key": {
            "title": "Public Key",
            "type": "string"
          },
          "psk": {
            "title": "Psk",
            "type": "string"
          },
          "allowed_ips": {
            "title": "Allowed Ips",
            "type": "string"
          },
          "untrusted_allowed_ips": {
            "title": "Untrusted Allowed Ips",
            "type": "string"
          },
          "remote_ip": {
            "title": "Remote Ip",
            "type": "string"
          },
          "remote_port": {
            "title": "Remote Port",
            "type": "string"
          },
          "system_location": {
            "title": "System Location",
            "type": "string"
          }
        }
      },
      "NBWGTunnelCreateRequest": {
        "title": "NBWGTunnelCreateRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "public_key": {
            "title": "Public Key",
            "type": "string"
          },
          "private_key": {
            "title": "Private Key",
            "type": "string"
          },
          "psk": {
            "title": "Psk",
            "type": "string"
          },
          "tunnel_ip": {
            "title": "Tunnel Ip",
            "type": "string"
          },
          "labels": {
            "title": "Labels",
            "type": "object"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "NBWGTunnelDeviceDataRequest": {
        "title": "NBWGTunnelDeviceDataRequest",
        "required": [
          "timestamp",
          "connection_type",
          "ip_address",
          "router_ip",
          "tunnel_status"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "type": "integer"
          },
          "connection_type": {
            "$ref": "#/components/schemas/NBWGConnectionType"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "router_ip": {
            "title": "Router Ip",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "ssid": {
            "title": "Ssid",
            "type": "string"
          },
          "port_name": {
            "title": "Port Name",
            "type": "string"
          },
          "tunnel_status": {
            "$ref": "#/components/schemas/NBWGTunnelStatus"
          },
          "ssid_trust_status": {
            "$ref": "#/components/schemas/NBWGTrustStatus"
          },
          "ssid_security": {
            "title": "Ssid Security",
            "type": "string"
          },
          "bssid": {
            "title": "Bssid",
            "type": "string"
          },
          "channel": {
            "title": "Channel",
            "type": "string"
          },
          "rssi": {
            "title": "Rssi",
            "type": "string"
          },
          "noise": {
            "title": "Noise",
            "type": "string"
          },
          "tx_rate": {
            "title": "Tx Rate",
            "type": "string"
          },
          "phy_mode": {
            "title": "Phy Mode",
            "type": "string"
          }
        }
      },
      "NBWGTunnelDeviceDataResponse": {
        "title": "NBWGTunnelDeviceDataResponse",
        "type": "object",
        "properties": {}
      },
      "NBWGTunnelStatus": {
        "title": "NBWGTunnelStatus",
        "enum": [
          "connected",
          "disconnected"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NIROBranding": {
        "title": "NIROBranding",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "NbServiceType": {
        "title": "NbServiceType",
        "enum": [
          "ddos",
          "fqdn",
          "sdr",
          "firewall",
          "dpi",
          "dns",
          "ids",
          "load_balancing",
          "remote_users",
          "segments",
          "nat",
          "dia_fw",
          "cloud_router",
          "dia_ddos"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NetworkSegmentPrefix": {
        "title": "NetworkSegmentPrefix",
        "required": [
          "subnet",
          "interface_name"
        ],
        "type": "object",
        "properties": {
          "subnet": {
            "title": "Subnet",
            "type": "string"
          },
          "interface_name": {
            "title": "Interface Name",
            "type": "string"
          }
        }
      },
      "NextHop": {
        "title": "NextHop",
        "required": [
          "ip",
          "afi",
          "used"
        ],
        "type": "object",
        "properties": {
          "ip": {
            "title": "Ip",
            "type": "string"
          },
          "afi": {
            "title": "Afi",
            "type": "string"
          },
          "used": {
            "title": "Used",
            "type": "boolean"
          }
        }
      },
      "Node": {
        "title": "Node",
        "required": [
          "id",
          "address"
        ],
        "type": "object",
        "properties": {
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NodeRole"
              }
            ],
            "default": "active"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/NodeType"
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "build_number": {
            "title": "Build Number",
            "type": "integer"
          },
          "build_sha": {
            "title": "Build Sha",
            "type": "string"
          },
          "iso_epoch": {
            "title": "Iso Epoch",
            "type": "integer"
          },
          "vendor": {
            "title": "Vendor",
            "type": "string"
          },
          "model": {
            "title": "Model",
            "type": "string"
          },
          "serial": {
            "title": "Serial",
            "type": "string"
          },
          "virtual": {
            "title": "Virtual",
            "type": "boolean"
          },
          "cpu_type": {
            "title": "Cpu Type",
            "type": "string"
          },
          "cpu_isolated": {
            "title": "Cpu Isolated",
            "type": "string"
          },
          "cpu_socket_count": {
            "title": "Cpu Socket Count",
            "type": "integer"
          },
          "cpu_core_per_socket": {
            "title": "Cpu Core Per Socket",
            "type": "integer"
          },
          "cpu_cores_total": {
            "title": "Cpu Cores Total",
            "type": "integer"
          },
          "mem_total": {
            "title": "Mem Total",
            "type": "integer"
          },
          "disk_total": {
            "title": "Disk Total",
            "type": "integer"
          },
          "health_score": {
            "title": "Health Score",
            "type": "integer"
          },
          "last_role_change": {
            "title": "Last Role Change",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NodeStatus"
              }
            ],
            "default": "registered"
          },
          "availability": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NodeAvailability"
              }
            ],
            "default": "up"
          },
          "ha_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HAStatus"
              }
            ],
            "default": "auto"
          }
        }
      },
      "NodeAvailability": {
        "title": "NodeAvailability",
        "enum": [
          "up",
          "down",
          "partial"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NodeRole": {
        "title": "NodeRole",
        "enum": [
          "active",
          "standby"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NodeStatus": {
        "title": "NodeStatus",
        "enum": [
          "registered",
          "ready",
          "syncing",
          "desynced",
          "invalid_cert",
          "unavailable",
          "new",
          "discovered"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "NodeType": {
        "title": "NodeType",
        "enum": [
          "nsos-v",
          "nsos-500",
          "nsos-1000",
          "nsos-6000"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PBMMeteringUnits": {
        "title": "PBMMeteringUnits",
        "enum": [
          "unspecified",
          "kps",
          "pps"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PBRAction": {
        "title": "PBRAction",
        "enum": [
          "ROUTE",
          "NO_ROUTE"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PCAPParams": {
        "title": "PCAPParams",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "pcap_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PcapTypes"
              }
            ],
            "default": "all"
          },
          "size": {
            "title": "Size",
            "exclusiveMaximum": 10000.0,
            "minimum": 1.0,
            "type": "integer",
            "default": 256
          },
          "max_packets": {
            "title": "Max Packets",
            "exclusiveMaximum": 10000.0,
            "minimum": 1.0,
            "type": "integer",
            "default": 200
          },
          "l2_interface": {
            "title": "L2 Interface",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "string"
          },
          "timeout_sec": {
            "title": "Timeout Sec",
            "exclusiveMaximum": 10000.0,
            "minimum": 1.0,
            "type": "integer",
            "default": 10
          }
        }
      },
      "PcapTypes": {
        "title": "PcapTypes",
        "enum": [
          "rx",
          "tx",
          "drop",
          "all"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PfxListItem": {
        "title": "PfxListItem",
        "required": [
          "ip"
        ],
        "type": "object",
        "properties": {
          "ip": {
            "title": "Ip",
            "type": "string"
          },
          "le": {
            "title": "Le",
            "type": "integer"
          },
          "ge": {
            "title": "Ge",
            "type": "integer"
          },
          "seq": {
            "title": "Seq",
            "type": "integer"
          },
          "match": {
            "title": "Match",
            "type": "boolean",
            "default": true
          }
        }
      },
      "PingRequestParameters": {
        "title": "PingRequestParameters",
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          }
        }
      },
      "PublicIPType": {
        "title": "PublicIPType",
        "enum": [
          "global",
          "location",
          "system"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RouteDetail": {
        "title": "RouteDetail",
        "required": [
          "valid",
          "pathFrom",
          "prefix",
          "prefixLen",
          "network",
          "version",
          "weight",
          "peerId",
          "path",
          "origin"
        ],
        "type": "object",
        "properties": {
          "valid": {
            "title": "Valid",
            "type": "boolean"
          },
          "bestpath": {
            "title": "Bestpath",
            "type": "boolean"
          },
          "selectionReason": {
            "title": "Selectionreason",
            "type": "string"
          },
          "pathFrom": {
            "title": "Pathfrom",
            "type": "string"
          },
          "prefix": {
            "title": "Prefix",
            "type": "string"
          },
          "prefixLen": {
            "title": "Prefixlen",
            "type": "integer"
          },
          "network": {
            "title": "Network",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "integer"
          },
          "weight": {
            "title": "Weight",
            "type": "integer"
          },
          "peerId": {
            "title": "Peerid",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "origin": {
            "title": "Origin",
            "type": "string"
          },
          "next_hops": {
            "title": "Next Hops",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NextHop"
            }
          }
        }
      },
      "RouteLookUpRequestParameters": {
        "title": "RouteLookUpRequestParameters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "anyOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ]
          }
        }
      },
      "RouteMapAction": {
        "title": "RouteMapAction",
        "enum": [
          "permit",
          "deny"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RuleFilter": {
        "title": "RuleFilter",
        "required": [
          "filter_type"
        ],
        "type": "object",
        "properties": {
          "filter_type": {
            "$ref": "#/components/schemas/FilterType"
          },
          "values": {
            "title": "Values"
          }
        }
      },
      "SSOTokenExchangeRequest": {
        "title": "SSOTokenExchangeRequest",
        "required": [
          "state",
          "code",
          "tenant_name"
        ],
        "type": "object",
        "properties": {
          "state": {
            "title": "State",
            "type": "string"
          },
          "code": {
            "title": "Code",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          }
        }
      },
      "SampleRate": {
        "title": "SampleRate",
        "enum": [
          "auto",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "1h"
        ],
        "type": "string",
        "description": "Enum defining the sample rate in any Statistics API request"
      },
      "Service": {
        "title": "Service",
        "required": [
          "type",
          "enable",
          "data"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NbServiceType"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "data": {
            "title": "Data",
            "type": "object"
          }
        }
      },
      "SingleSignOnProviders": {
        "title": "SingleSignOnProviders",
        "required": [
          "providers"
        ],
        "type": "object",
        "properties": {
          "providers": {
            "title": "Providers",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Site": {
        "title": "Site",
        "required": [
          "name",
          "connection_type",
          "operator",
          "address",
          "network_status",
          "handover_bw",
          "naas_location",
          "naas_systems",
          "labels",
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "connection_type": {
            "$ref": "#/components/schemas/SiteConnectionType"
          },
          "operator": {
            "title": "Operator",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "cloud_region": {
            "title": "Cloud Region",
            "type": "string"
          },
          "network_status": {
            "$ref": "#/components/schemas/SiteNetworkStatus"
          },
          "handover_bw": {
            "title": "Handover Bw",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteBandwidth"
            }
          },
          "naas_location": {
            "title": "Naas Location",
            "type": "string"
          },
          "naas_systems": {
            "title": "Naas Systems",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "market_name": {
            "title": "Market Name",
            "type": "string"
          },
          "market_id": {
            "title": "Market Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          }
        }
      },
      "SiteBandwidth": {
        "title": "SiteBandwidth",
        "required": [
          "bw"
        ],
        "type": "object",
        "properties": {
          "bw": {
            "title": "Bw",
            "type": "number"
          },
          "hw": {
            "title": "Hw",
            "type": "string"
          }
        }
      },
      "SiteConnectionType": {
        "title": "SiteConnectionType",
        "enum": [
          "DC",
          "Splice Point",
          "FTTB",
          "Cloud",
          "Market"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SiteCreateRequest": {
        "title": "SiteCreateRequest",
        "required": [
          "name",
          "connection_type",
          "operator",
          "address",
          "network_status",
          "handover_bw",
          "naas_location",
          "naas_systems",
          "labels"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "connection_type": {
            "$ref": "#/components/schemas/SiteConnectionType"
          },
          "operator": {
            "title": "Operator",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "cloud_region": {
            "title": "Cloud Region",
            "type": "string"
          },
          "network_status": {
            "$ref": "#/components/schemas/SiteNetworkStatus"
          },
          "handover_bw": {
            "title": "Handover Bw",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteBandwidth"
            }
          },
          "naas_location": {
            "title": "Naas Location",
            "type": "string"
          },
          "naas_systems": {
            "title": "Naas Systems",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "market_name": {
            "title": "Market Name",
            "type": "string"
          },
          "market_id": {
            "title": "Market Id",
            "type": "integer"
          }
        }
      },
      "SiteNetworkStatus": {
        "title": "SiteNetworkStatus",
        "enum": [
          "off",
          "partner",
          "net"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SiteUpdateData": {
        "title": "SiteUpdateData",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "connection_type": {
            "$ref": "#/components/schemas/SiteConnectionType"
          },
          "operator": {
            "title": "Operator",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "cloud_region": {
            "title": "Cloud Region",
            "type": "string"
          },
          "network_status": {
            "$ref": "#/components/schemas/SiteNetworkStatus"
          },
          "handover_bw": {
            "title": "Handover Bw",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteBandwidth"
            }
          },
          "naas_location": {
            "title": "Naas Location",
            "type": "string"
          },
          "naas_systems": {
            "title": "Naas Systems",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "title": "Labels",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "market_name": {
            "title": "Market Name",
            "type": "string"
          },
          "market_id": {
            "title": "Market Id",
            "type": "integer"
          }
        }
      },
      "StatisticsDdosAttackRequest": {
        "title": "StatisticsDdosAttackRequest",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsDdosMetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsDdosAttackTrafficFilters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsDdosAttackTrafficFilters": {
        "title": "StatisticsDdosAttackTrafficFilters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "rule_name": {
            "title": "Rule Name",
            "type": "string"
          },
          "rule_id": {
            "title": "Rule Id",
            "type": "integer"
          },
          "gate_vi": {
            "title": "Gate Vi",
            "type": "string"
          },
          "target_address": {
            "title": "Target Address",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "StatisticsDdosMetricsColumns": {
        "title": "StatisticsDdosMetricsColumns",
        "enum": [
          "rx_bytes",
          "tx_bytes",
          "rx_bps",
          "rx_bps_dropped_by_meter",
          "outgoing_bps",
          "tx_bps",
          "tx_bps_dropped_by_meter",
          "incoming_bps",
          "rx_packets",
          "tx_packets",
          "rx_pps",
          "rx_pps_dropped_by_meter",
          "outgoing_pps",
          "tx_pps",
          "tx_pps_dropped_by_meter",
          "incoming_pps"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsFirewallFilters": {
        "title": "StatisticsFirewallFilters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "rule_name": {
            "title": "Rule Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "StatisticsFirewallMetricsColumns": {
        "title": "StatisticsFirewallMetricsColumns",
        "enum": [
          "cps",
          "bps",
          "pps",
          "bytes",
          "packets",
          "connections",
          "concurrent_connections"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsFirewallRequest": {
        "title": "StatisticsFirewallRequest",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsFirewallMetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsFirewallFilters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsFirewallTraficFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsFirewallTraficFlags": {
        "title": "StatisticsFirewallTraficFlags",
        "type": "object",
        "properties": {
          "group_by_rule_name": {
            "title": "Group By Rule Name",
            "type": "boolean",
            "default": true
          },
          "firewall_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FirewallType"
              }
            ],
            "default": "firewall"
          }
        },
        "additionalProperties": false
      },
      "StatisticsFlags": {
        "title": "StatisticsFlags",
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "StatisticsFloodMetricsColumns": {
        "title": "StatisticsFloodMetricsColumns",
        "enum": [
          "rx_bps",
          "rx_bps_dropped_by_meter",
          "outgoing_bps",
          "tx_bps",
          "tx_bps_dropped_by_meter",
          "incoming_bps",
          "rx_pps",
          "rx_pps_dropped_by_meter",
          "outgoing_pps",
          "tx_pps",
          "tx_pps_dropped_by_meter",
          "incoming_pps",
          "rx_bytes",
          "tx_bytes",
          "rx_packets",
          "tx_packets"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsFloodRequest": {
        "title": "StatisticsFloodRequest",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsFloodMetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsFloodTrafficFilters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsFloodTraficFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsFloodTrafficFilters": {
        "title": "StatisticsFloodTrafficFilters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "rule_name": {
            "title": "Rule Name",
            "type": "string"
          },
          "rule_id": {
            "title": "Rule Id",
            "type": "string"
          },
          "gate_vi": {
            "title": "Gate Vi",
            "type": "string"
          },
          "target_address": {
            "title": "Target Address",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "StatisticsFloodTraficFlags": {
        "title": "StatisticsFloodTraficFlags",
        "type": "object",
        "properties": {
          "group_by_rule_name": {
            "title": "Group By Rule Name",
            "type": "boolean",
            "default": true
          },
          "group_by_rule_id": {
            "title": "Group By Rule Id",
            "type": "boolean",
            "default": false
          },
          "group_by_dia_name": {
            "title": "Group By Dia Name",
            "type": "boolean",
            "default": false
          },
          "group_by_target_address": {
            "title": "Group By Target Address",
            "type": "boolean",
            "default": false
          },
          "group_by_selected_option": {
            "title": "Group By Selected Option",
            "type": "boolean",
            "default": true
          },
          "flood_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FloodType"
              }
            ],
            "default": "all"
          }
        },
        "additionalProperties": false
      },
      "StatisticsL2Filters": {
        "title": "StatisticsL2Filters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "alias_name": {
            "title": "Alias Name",
            "type": "string"
          },
          "l2_name": {
            "title": "L2 Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "node_name": {
            "title": "Node Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "StatisticsL2MetricsColumns": {
        "title": "StatisticsL2MetricsColumns",
        "enum": [
          "rx_bytes",
          "tx_bytes",
          "rx_bits",
          "tx_bits",
          "rx_packets",
          "tx_packets",
          "rx_bytes_dropped_by_meter",
          "tx_bytes_dropped_by_meter",
          "rx_packets_dropped_by_meter",
          "tx_packets_dropped_by_meter",
          "rx_bps",
          "tx_bps",
          "rx_pps",
          "tx_pps",
          "rx_bps_dropped_by_meter",
          "tx_bps_dropped_by_meter",
          "rx_pps_dropped_by_meter",
          "tx_pps_dropped_by_meter",
          "incoming_bps",
          "outgoing_bps",
          "incoming_pps",
          "outgoing_pps"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsL2Request": {
        "title": "StatisticsL2Request",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsL2MetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsL2Filters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsMetricsColumns": {
        "title": "StatisticsMetricsColumns",
        "enum": [
          "rx_bytes",
          "tx_bytes",
          "rx_bits",
          "tx_bits",
          "rx_packets",
          "tx_packets",
          "rx_bytes_dropped_by_meter",
          "tx_bytes_dropped_by_meter",
          "rx_packets_dropped_by_meter",
          "tx_packets_dropped_by_meter",
          "rx_bps",
          "tx_bps",
          "rx_pps",
          "tx_pps",
          "rx_bps_dropped_by_meter",
          "tx_bps_dropped_by_meter",
          "rx_pps_dropped_by_meter",
          "tx_pps_dropped_by_meter",
          "incoming_bps",
          "outgoing_bps",
          "incoming_pps",
          "outgoing_pps"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsNatFilters": {
        "title": "StatisticsNatFilters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "rule_name": {
            "title": "Rule Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "StatisticsNatMetricsColumns": {
        "title": "StatisticsNatMetricsColumns",
        "enum": [
          "rx_bps",
          "rx_pps",
          "rx_bytes",
          "rx_packets",
          "tx_bps",
          "tx_pps",
          "tx_bytes",
          "tx_packets"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsNatRequest": {
        "title": "StatisticsNatRequest",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsNatMetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsNatFilters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsNatTraficFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsNatTraficFlags": {
        "title": "StatisticsNatTraficFlags",
        "type": "object",
        "properties": {
          "group_by_rule_name": {
            "title": "Group By Rule Name",
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "StatisticsPbrFilters": {
        "title": "StatisticsPbrFilters",
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "rule_name": {
            "title": "Rule Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "StatisticsPbrMetricsColumns": {
        "title": "StatisticsPbrMetricsColumns",
        "enum": [
          "cps",
          "bps",
          "pps",
          "bytes",
          "packets",
          "connections",
          "concurrent_connections"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatisticsPbrRequest": {
        "title": "StatisticsPbrRequest",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsPbrMetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsPbrFilters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsPbrTraficFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsPbrTraficFlags": {
        "title": "StatisticsPbrTraficFlags",
        "type": "object",
        "properties": {
          "group_by_rule_name": {
            "title": "Group By Rule Name",
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "StatisticsRequest_StatisticsMetricsColumns__StatisticsViFilters__StatisticsFlags_": {
        "title": "StatisticsRequest[StatisticsMetricsColumns, StatisticsViFilters, StatisticsFlags]",
        "required": [
          "since",
          "until",
          "column",
          "filters"
        ],
        "type": "object",
        "properties": {
          "since": {
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "title": "Until",
            "type": "string",
            "format": "date-time"
          },
          "sample_rate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleRate"
              }
            ],
            "default": "auto"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsMetricsColumns"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/StatisticsViFilters"
          },
          "flags": {
            "$ref": "#/components/schemas/StatisticsFlags"
          }
        },
        "description": "Defines Statistics requests.\nThis request is being processed by statisics-utils in order to create apropreate Elasticsearch request"
      },
      "StatisticsResponse": {
        "title": "StatisticsResponse",
        "required": [
          "sample_rate"
        ],
        "type": "object",
        "properties": {
          "samples": {
            "title": "Samples",
            "type": "array",
            "items": {
              "type": "object"
            },
            "default": []
          },
          "sample_rate": {
            "title": "Sample Rate",
            "type": "string"
          }
        }
      },
      "StatisticsViFilters": {
        "title": "StatisticsViFilters",
        "type": "object",
        "properties": {
          "vi_name": {
            "title": "Vi Name",
            "type": "string"
          },
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "node_name": {
            "title": "Node Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base class for filters allowed in Statistics API request\nThis class can be inherited from, to extend additional requried fields\nNOTE: ordered_dictionary must be implemented in child class to definde the order of the filtering"
      },
      "TagTypeDef": {
        "title": "TagTypeDef",
        "type": "object",
        "properties": {
          "Key": {
            "title": "Key",
            "type": "string"
          },
          "Value": {
            "title": "Value",
            "type": "string"
          }
        }
      },
      "TenantContactInfo": {
        "title": "TenantContactInfo",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          }
        }
      },
      "Terms": {
        "title": "Terms",
        "required": [
          "terms_content"
        ],
        "type": "object",
        "properties": {
          "terms_content": {
            "title": "Terms Content",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermsContent"
            }
          }
        }
      },
      "TermsAndConditions": {
        "title": "TermsAndConditions",
        "required": [
          "id",
          "created_at",
          "content",
          "related_services",
          "version",
          "enable",
          "expiration"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "title": "Content",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Terms"
            }
          },
          "related_services": {
            "title": "Related Services",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "enable": {
            "title": "Enable",
            "type": "boolean"
          },
          "expiration": {
            "title": "Expiration",
            "type": "integer"
          }
        }
      },
      "TermsContent": {
        "title": "TermsContent",
        "required": [
          "type",
          "content"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "TimePolicyActions": {
        "title": "TimePolicyActions",
        "enum": [
          "activate",
          "disable"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TokenRequest": {
        "title": "TokenRequest",
        "required": [
          "username",
          "password",
          "tenant_name"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          },
          "tenant_name": {
            "title": "Tenant Name",
            "type": "string"
          },
          "new_password": {
            "title": "New Password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          }
        }
      },
      "TraceRouteRequestParameters": {
        "title": "TraceRouteRequestParameters",
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "vrf_name": {
            "title": "Vrf Name",
            "type": "string"
          },
          "gate_vi_name": {
            "title": "Gate Vi Name",
            "type": "string"
          },
          "system_name": {
            "title": "System Name",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "protocol": {
            "$ref": "#/components/schemas/TracerouteProtocol"
          }
        }
      },
      "TracerouteProtocol": {
        "title": "TracerouteProtocol",
        "enum": [
          "TCP",
          "UDP"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TrustedAccessResponse": {
        "title": "TrustedAccessResponse",
        "type": "object",
        "properties": {
          "end_time": {
            "title": "End Time",
            "type": "integer"
          }
        }
      },
      "UpdateNetworkObjectRequest": {
        "title": "UpdateNetworkObjectRequest",
        "type": "object",
        "properties": {
          "add_subnets": {
            "title": "Add Subnets",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "delete_subnets": {
            "title": "Delete Subnets",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "add_ports": {
            "title": "Add Ports",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": []
          },
          "delete_ports": {
            "title": "Delete Ports",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": []
          }
        }
      },
      "UserData": {
        "title": "UserData",
        "required": [
          "id",
          "username",
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "is_remote_user": {
            "title": "Is Remote User",
            "type": "boolean",
            "default": false
          }
        }
      },
      "UserRole": {
        "title": "UserRole",
        "enum": [
          "admin",
          "viewer",
          "editor",
          "remote_user"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "VirtualInterfaceType": {
        "title": "VirtualInterfaceType",
        "enum": [
          "bridged",
          "routed",
          "loopback"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "VisibleItemsList": {
        "title": "VisibleItemsList",
        "required": [
          "items",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {}
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "total_count": {
            "title": "Total Count",
            "type": "integer",
            "default": 0
          },
          "visible_count": {
            "title": "Visible Count",
            "type": "integer",
            "default": 0
          }
        }
      },
      "VpcCidrBlockAssociationTypeDef": {
        "title": "VpcCidrBlockAssociationTypeDef",
        "type": "object",
        "properties": {
          "AssociationId": {
            "title": "Associationid",
            "type": "string"
          },
          "CidrBlock": {
            "title": "Cidrblock",
            "type": "string"
          },
          "CidrBlockState": {
            "$ref": "#/components/schemas/VpcCidrBlockStateTypeDef"
          }
        }
      },
      "VpcCidrBlockStateTypeDef": {
        "title": "VpcCidrBlockStateTypeDef",
        "type": "object",
        "properties": {
          "State": {
            "title": "State",
            "enum": [
              "associated",
              "associating",
              "disassociated",
              "disassociating",
              "failed",
              "failing"
            ],
            "type": "string"
          },
          "StatusMessage": {
            "title": "Statusmessage",
            "type": "string"
          }
        }
      },
      "VpcIpv6CidrBlockAssociationTypeDef": {
        "title": "VpcIpv6CidrBlockAssociationTypeDef",
        "type": "object",
        "properties": {
          "AssociationId": {
            "title": "Associationid",
            "type": "string"
          },
          "Ipv6CidrBlock": {
            "title": "Ipv6Cidrblock",
            "type": "string"
          },
          "Ipv6CidrBlockState": {
            "$ref": "#/components/schemas/VpcCidrBlockStateTypeDef"
          },
          "NetworkBorderGroup": {
            "title": "Networkbordergroup",
            "type": "string"
          },
          "Ipv6Pool": {
            "title": "Ipv6Pool",
            "type": "string"
          }
        }
      },
      "VpcTypeDef": {
        "title": "VpcTypeDef",
        "type": "object",
        "properties": {
          "CidrBlock": {
            "title": "Cidrblock",
            "type": "string"
          },
          "DhcpOptionsId": {
            "title": "Dhcpoptionsid",
            "type": "string"
          },
          "State": {
            "title": "State",
            "enum": [
              "available",
              "pending"
            ],
            "type": "string"
          },
          "VpcId": {
            "title": "Vpcid",
            "type": "string"
          },
          "OwnerId": {
            "title": "Ownerid",
            "type": "string"
          },
          "InstanceTenancy": {
            "title": "Instancetenancy",
            "enum": [
              "dedicated",
              "default",
              "host"
            ],
            "type": "string"
          },
          "Ipv6CidrBlockAssociationSet": {
            "title": "Ipv6Cidrblockassociationset",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcIpv6CidrBlockAssociationTypeDef"
            }
          },
          "CidrBlockAssociationSet": {
            "title": "Cidrblockassociationset",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcCidrBlockAssociationTypeDef"
            }
          },
          "IsDefault": {
            "title": "Isdefault",
            "type": "boolean"
          },
          "Tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagTypeDef"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "HTTPBearerFromCookie": {
        "type": "http",
        "scheme": "bearer"
      },
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "http://keycloak:8080/broker/keycloak/realms/myrealm/protocol/openid-connect/token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "service - aws",
      "description": "Management of AWS cloud credentials, enabling seamless integration and automated connectivity"
    },
    {
      "name": "service - looking glass",
      "description": "Test network connectivity"
    },
    {
      "name": "service - SDR",
      "description": "Management for SDR (Session Details Records), a superset of classic NetFlow data"
    },
    {
      "name": "tenant",
      "description": "Manage tenant-related information like packages and services as well as contact information"
    },
    {
      "name": "tenant - virtual interface",
      "description": "Management for VIs (Virtual Interfaces)"
    },
    {
      "name": "group",
      "description": "Predefined Groups of IP prefixes and IPs ready to be used in filters for firewall and other services"
    },
    {
      "name": "sites",
      "description": "Manage information about sites providing network reach to order new Customer Ports"
    }
  ]
}
